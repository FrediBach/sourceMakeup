<table class="container" cellpadding="0" cellspacing="0"><thead><th class="comment"><select id="files"><option>sourcemakeup.php</option><option selected>js/jquery.jkit.1.1.28.js</option><option>js/sourcemakeup.js</option><option>css/sourcemakeup.css</option></select>Documentation</th><th class="code">Code</th></thead><tbody><tr class="docu"><td class="comment"><h1 id="jquery-plugin-jkit">jQuery Plugin: jKit</h1>

<blockquote>
  <p>A very easy to use, cross platform jQuery UI toolkit that's still small in size, has the
  features you need and doesn't get in your way.</p>
</blockquote>

<p>Put jQuery and jKit on all your pages and HTML becomes so much better. And the best thing?
You really don't have to be a programmer to create a trully amazing website!</p>

<p>jKit has 99% of all the features you ever need. You don't have to check out dozens of plugins,
learn how to use them, only to find out they don't work in a specific browser.</p>

<p>And even if jKit doesn't have that one feature you need right now, jKit is fully extendable
with plugins and command replacements, all that and your API always stays the same.</p>

<ul>
<li>Version: <code>1.1.28</code></li>
<li>Release date: <code>5. 3. 2013</code></li>
<li><a href="http://jquery-jkit.com/">Documentation &amp; Demos</a></li>
<li><a href="https://github.com/FrediBach/jQuery-jKit/archive/master.zip">Download</a></li>
</ul>

<h2 id="copyright">Copyright</h2>

<ul>
<li>(c) 2012/2013 by <em>Fredi Bach</em></li>
<li><a href="http://fredibach.ch/">Home</a></li>
</ul>

<h2 id="license">License</h2>

<p>jKit is open source and MIT licensed. For more informations read the <strong>license.txt</strong> file</p>

<h2 id="basic-usage">Basic Usage</h2>

<p>Inside your head tag or at the bottom of your page before the closing body tag:</p>

<pre><code>&lt;script src="js/jquery-1.9.1.min.js"&gt;&lt;/script&gt;
&lt;script src="js/jquery.easing.1.3.js"&gt;&lt;/script&gt;
&lt;script src="js/jquery.jkit.1.1.28.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
    $(document).ready(function(){
        $('body').jKit();
    });
&lt;/script&gt;
</code></pre>

<p>On your HTML elements:</p>

<pre><code>&lt;p data-jkit="[hide:delay=2000;speed=500]"&gt;
    Hidden after two seconds
&lt;/p&gt;
</code></pre>

<h2 id="the-source">The Source</h2>
</td><td class="code"><pre class="linenumbers"></pre><pre class="prettyprint"></pre></td></tr><tr class="docu"><td class="comment"><p>Create our plugins local scope, make sure <strong>$</strong> is mapped to jQuery and guarantee that <strong>undefined</strong> really is <strong>undefined</strong>.</p>
</td><td class="code"><pre class="linenumbers">55</pre><pre class="prettyprint">(function($, undefined) {</pre></td></tr><tr class="docu"><td class="comment"><p>Create our main function with the following parameters:</p>

<ul>
<li><strong>element</strong> contains the DOM element where jKit is applied to</li>
<li><strong>options</strong> is either a string with a single command name or a JavaScript object with all options or undefined</li>
<li><strong>moreoptions</strong> is optionally used in case options contains the a command string and contains the options object</li>
</ul>
</td><td class="code"><pre class="linenumbers">63</pre><pre class="prettyprint">    $.jKit = function(element, options, moreoptions) {</pre></td></tr><tr class="docu"><td class="comment"><p>Define all plugin defaults. These can be overwritten by the plugins options set on init.</p>
</td><td class="code"><pre class="linenumbers">67</pre><pre class="prettyprint">        var defaults = {</pre></td></tr><tr class="docu"><td class="comment"><p>First we set some general defaults:</p>
</td><td class="code"><pre class="linenumbers">71
72
73
74
75
76
77
78
79
80
81
82</pre><pre class="prettyprint">            prefix: 'jkit',
            dataAttribute: 'data-jkit',
            activeClass: 'active',
            errorClass: 'error',
            successClass: 'success',
            ignoreFocus: false,
            ignoreViewport: false,
            keyNavigation: true,
            touchNavigation: true,
            plugins: {},
            replacements: {},
            delimiter: ',',</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> macros</span></td></tr><tr class="docu"><td class="comment"><p>Now we set some default macros for often used command/parameter combinations:</p>
</td><td class="code"><pre class="linenumbers">88
89
90
91</pre><pre class="prettyprint">            macros: {
                'hide-if-empty': 'binding:selector=this;source=text;mode=css.display',
                'smooth-blink': 'loop:speed1=2000;duration1=250;speed2=250;duration2=2000'
            },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /macros</span></td></tr><tr class="docu"><td class="comment"><p>Next we're defining all the default options for each command. You can get a good overview of them
on the official <a href="http://jquery-jkit.com/pages/cheatsheet.php">cheat sheet</a>.</p>
</td><td class="code"><pre class="linenumbers">98</pre><pre class="prettyprint">            commands: {</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> command.template</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">102
103
104
105
106
107</pre><pre class="prettyprint">                'template': {
                    'action':             'set',
                    'name':                'template',
                    'dynamic':             'no',
                    'addhtml':             '+'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.template, command.lightbox</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">111
112
113
114
115
116
117
118
119
120
121
122
123</pre><pre class="prettyprint">                'lightbox': {
                    'speed':             500,
                    'opacity':             0.7,
                    'clearance':         200,
                    'closer':             'x',
                    'next':             '&gt;',
                    'prev':             '&lt;',
                    'modal':             'no',
                    'width':             '',
                    'height':             '',
                    'titleHeight':         20,
                    'group':             ''
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.lightbox, command.scroll</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">127
128
129
130
131</pre><pre class="prettyprint">                'scroll': {
                    'speed':             500,
                    'dynamic':             'yes',
                    'easing':             'linear'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.scroll, command.hide</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">135
136
137
138
139
140</pre><pre class="prettyprint">                'hide': {
                    'delay':             0,
                    'speed':             500,
                    'animation':         'fade',
                    'easing':             'linear'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.hide, command.remove</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">144
145
146</pre><pre class="prettyprint">                'remove': {
                    'delay':            0
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.remove, command.show</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">150
151
152
153
154
155</pre><pre class="prettyprint">                'show': {
                    'delay':            0,
                    'speed':            500,
                    'animation':        'fade',
                    'easing':            'linear'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.show, command.showandhide</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">159
160
161
162
163
164
165</pre><pre class="prettyprint">                'showandhide': {
                    'delay':            0,
                    'speed':            500,
                    'duration':            10000,
                    'animation':        'fade',
                    'easing':            'linear'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.showandhide, command.loop</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">169
170
171
172
173
174
175
176
177</pre><pre class="prettyprint">                'loop': {
                    'speed1':            500,
                    'speed2':            500,
                    'duration1':        2000,
                    'duration2':        2000,
                    'easing1':            'linear',
                    'easing2':            'linear',
                    'animation':        'fade'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.loop, command.random</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">181
182
183
184</pre><pre class="prettyprint">                'random': {
                    'count':             1,
                    'remove':             'yes'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.random, command.partially</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">188
189
190
191
192
193</pre><pre class="prettyprint">                'partially': {
                    'height':            200,
                    'text':                'more ...',
                    'speed':            250,
                    'easing':            'linear'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.partially, command.slideshow</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">197
198
199
200
201
202
203
204</pre><pre class="prettyprint">                'slideshow': {
                    'shuffle':            'no',
                    'interval':            3000,
                    'speed':            250,
                    'animation':        'fade',
                    'easing':            'linear',
                    'on':                 ''
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.slideshow, command.animation</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">208
209
210
211
212
213
214
215
216
217</pre><pre class="prettyprint">                'animation': {
                    'fps':                25,
                    'loop':                'no',
                    'from':             '',
                    'to':                 '',
                    'speed':             '500',
                    'easing':             'linear',
                    'delay':            0,
                    'on':                 ''
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.animation, command.gallery</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">221
222
223
224
225
226
227
228
229</pre><pre class="prettyprint">                'gallery': {
                    'active':            1,
                    'event':            'click',
                    'showcaptions':        'yes',
                    'animation':        'none',
                    'speed':            500,
                    'easing':            'linear',
                    'lightbox':         'no'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.gallery, command.tabs</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">233
234
235
236
237
238</pre><pre class="prettyprint">                'tabs': {
                    'active':            1,
                    'animation':        'none',
                    'speed':            250,
                    'easing':            'linear'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.tabs, command.accordion</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">242
243
244
245
246
247</pre><pre class="prettyprint">                'accordion': {
                    'active':            1,
                    'animation':        'slide',
                    'speed':            250,
                    'easing':            'linear'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.accordion, command.carousel</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">251
252
253
254
255
256
257
258
259
260</pre><pre class="prettyprint">                'carousel': {
                    'autoplay':         &quot;yes&quot;,
                    'limit':             5,
                    'animation':        'grow',
                    'speed':            250,
                    'easing':            'linear',
                    'interval':            5000,
                    'prevhtml':            '&amp;lt;',
                    'nexthtml':            '&amp;gt;'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.carousel, command.parallax</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">264
265
266
267
268
269</pre><pre class="prettyprint">                'parallax': {
                    'strength':            5,
                    'axis':                'x',
                    'scope':            'global',
                    'detect':             'mousemove'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.parallax, command.form</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">273
274
275</pre><pre class="prettyprint">                'form': {
                    'validateonly':        'no'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.form, command.plugin</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">279
280
281</pre><pre class="prettyprint">                'plugin': {
                    'script':             ''
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.plugin, command.tooltip</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">285
286
287
288
289
290</pre><pre class="prettyprint">                'tooltip': {
                    'text':                '',
                    'color':            '#fff',
                    'background':        '#000',
                    'classname':        ''
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.tooltip, command.background</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">294
295
296</pre><pre class="prettyprint">                'background': {
                    'distort':            'no'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.background, command.lorem</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">300
301
302
303
304</pre><pre class="prettyprint">                'lorem': {
                    'paragraphs':        0,
                    'length':            '',
                    'random':            'no'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.lorem, command.binding</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325</pre><pre class="prettyprint">                'binding': {
                    'selector':            '',
                    'source':            'val',
                    'variable':            '',
                    'mode':                'text',
                    'interval':            100,
                    'math':                '',
                    'condition':         '',
                    'if':                '',
                    'else':                '',
                    'speed':            0,
                    'easing':            'linear',
                    'search':             '',
                    'trigger':             'no',
                    'accuracy':         '',
                    'min':                 '',
                    'max':                 '' 
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.binding, command.limit</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">329
330
331
332
333
334
335
336</pre><pre class="prettyprint">                'limit': {
                    'elements':            'children',
                    'count':            5,
                    'animation':        'none',
                    'speed':            250,
                    'easing':            'linear',
                    'endstring':        '...'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.limit, command.chart</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">340
341
342
343
344
345</pre><pre class="prettyprint">                'chart': {
                    'max':                0,
                    'delaysteps':        100,
                    'speed':            500,
                    'easing':            'linear'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.chart, command.encode</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">349
350
351
352</pre><pre class="prettyprint">                'encode': {
                    'format':            'code',
                    'fix':                 'yes'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.encode, command.split</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">356
357
358
359
360
361</pre><pre class="prettyprint">                'split': {
                    'separator':         '',
                    'container':         'span',
                    'before':            '',
                    'after':            ''
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.split, command.live</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">365
366
367</pre><pre class="prettyprint">                'live': {
                    'interval':         60
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.live, command.key</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">371</pre><pre class="prettyprint">                'key': {},</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.key, command.ajax</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">375
376
377
378
379
380</pre><pre class="prettyprint">                'ajax': {
                    'animation':        'slide',
                    'speed':            250,
                    'easing':            'linear',
                    'when':             'click'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.ajax, command.replace</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">384
385
386
387
388</pre><pre class="prettyprint">                'replace': {
                    'modifier':         'g',
                    'search':             '',
                    'replacement':         ''
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.replace, command.cycle</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">392
393
394
395
396
397</pre><pre class="prettyprint">                'cycle': {
                    'what':             'class',
                    'where':             'li',
                    'scope':             'children',
                    'sequence':         'odd,even'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.cycle, command.fontsize</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">401
402
403
404
405
406
407</pre><pre class="prettyprint">                'fontsize': {
                    'steps':             2,
                    'min':                 6,
                    'max':                 72,
                    'affected':            'p',
                    'style':             'font-size'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.fontsize, command.swap</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">411
412
413
414</pre><pre class="prettyprint">                'swap': {
                    'versions':         '_off,_on',
                    'attribute':         'src'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.swap, command.ticker</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">418
419
420
421
422</pre><pre class="prettyprint">                'ticker': {
                    'speed':             100,
                    'delay':             2000,
                    'loop':             'yes'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.ticker, command.sort</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">426
427
428
429
430
431</pre><pre class="prettyprint">                'sort': {
                    'what':             'text',
                    'by':                 '',
                    'start':            0,
                    'end':                0
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.sort, command.zoom</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">435
436
437
438
439</pre><pre class="prettyprint">                'zoom': {
                    'scale':             2,
                    'speed':             150,
                    'lightbox':            'no'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.zoom, command.api</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">443
444
445
446
447
448
449</pre><pre class="prettyprint">                'api': {
                    'format':             'json',
                    'value':             '',
                    'url':                 '',
                    'interval':         -1,
                    'template':         ''
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.api, command.filter</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">453
454
455
456
457
458
459
460
461</pre><pre class="prettyprint">                'filter': {
                    'by':                 'class',
                    'affected':         '',
                    'animation':        'slide',
                    'speed':            250,
                    'easing':            'linear',
                    'logic':             'and',
                    'global':             'no'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.filter, command.summary</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">465
466
467
468
469
470
471
472</pre><pre class="prettyprint">                'summary': {
                    'what':             '',
                    'linked':             'yes',
                    'from':             '',
                    'scope':             'children',
                    'style':             'ul',
                    'indent':             'no'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.summary, command.paginate</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">476
477
478
479
480
481
482
483
484</pre><pre class="prettyprint">                'paginate': {
                    'limit':             '25',
                    'by':                 'node',
                    'container':         '',
                    'animation':        'none',
                    'speed':            250,
                    'easing':            'linear',
                    'pos':                 'after'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.paginate, command.menu</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">488
489
490</pre><pre class="prettyprint">                'menu': {
                    'autoactive':         'no'
                },</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command.menu</span></td></tr><tr class="docu"><td class="comment"><p>To make our code block funtionalllity not brake anything, we have to add an empty entry at the end:</p>
</td><td class="code"><pre class="linenumbers">496
497
498
499</pre><pre class="prettyprint">                '':{}
                
            }
        };</pre></td></tr><tr class="docu"><td class="comment"><p>Set an alias to <strong>this</strong> so that we can use it everywhere inside our plugin:</p>
</td><td class="code"><pre class="linenumbers">503</pre><pre class="prettyprint">        var plugin = this;</pre></td></tr><tr class="docu"><td class="comment"><p>Create an object for the plugin settings:</p>
</td><td class="code"><pre class="linenumbers">507</pre><pre class="prettyprint">        plugin.settings = {};</pre></td></tr><tr class="docu"><td class="comment"><p>And while were're at it, cache the DOM element:</p>
</td><td class="code"><pre class="linenumbers">511
512</pre><pre class="prettyprint">        var $element = $(element),
            element = element;</pre></td></tr><tr class="docu"><td class="comment"><p>In case we are just applying a single command, we need to take the options from the <strong>moreoptions</strong> parameter:</p>
</td><td class="code"><pre class="linenumbers">516
517
518
519
520
521
522</pre><pre class="prettyprint">        if (typeof options == 'string'){
            var singlecommand = options;
            if (moreoptions == undefined){
                moreoptions = {};
            }
            options = moreoptions;
        }</pre></td></tr><tr class="docu"><td class="comment"><p>For a few things, we need some local plugin variables and objects, let's set them now:</p>
</td><td class="code"><pre class="linenumbers">526
527
528
529
530
531</pre><pre class="prettyprint">        var startX, startY;
        var windowhasfocus = true;
        var uid = 0;
        var lightboxes = {};
        var templates = {};
        var commandkeys = {};</pre></td></tr><tr class="docu"><td class="comment"><p>We want to know if the current window is in focus or not, we can do this with the <strong>window</strong> object (just not in IE7 &amp; 8):</p>
</td><td class="code"><pre class="linenumbers">535
536
537
538
539
540
541</pre><pre class="prettyprint">        if ($.support.htmlSerialize || $.support.opacity){
            $(window).focus(function() {
                windowhasfocus = true;
            }).blur(function() {
                windowhasfocus = false;
            });
        }</pre></td></tr><tr class="docu"><td class="comment"><h2 id="plugin-functions">Plugin Functions</h2>
</td><td class="code"><pre class="linenumbers"></pre><pre class="prettyprint"></pre></td></tr><tr class="docu"><td class="comment"><p>The following collection of functions are internally used. There is a way to call them with an external script,
<strong>but you should know what you're doing!</strong> Here's an exmaple:</p>

<pre><code>$('body').data('jKit').executeCommand('body', 'lightbox');
</code></pre>

<p>The above code would call the <strong>plugin.executeCommand()</strong> function.</p>
</td><td class="code"><pre class="linenumbers"></pre><pre class="prettyprint"></pre></td></tr><tr class="docu"><td class="comment"><h3 id="init">init</h3>

<p>The <strong>init</strong> function is called on plugin init and sets up all the stuff we need.</p>
</td><td class="code"><pre class="linenumbers">556</pre><pre class="prettyprint">        plugin.init = function($el){</pre></td></tr><tr class="docu"><td class="comment"><p>In case this function is called without a specific DOM node, use the plugins main DOM element:</p>
</td><td class="code"><pre class="linenumbers">560</pre><pre class="prettyprint">            if ($el == undefined) $el = $element;</pre></td></tr><tr class="docu"><td class="comment"><p>Extend the plugin defaults with the applied options:</p>
</td><td class="code"><pre class="linenumbers">564
565
566
567</pre><pre class="prettyprint">            plugin.settings = $.extend({}, defaults, options);
            var s = plugin.settings;
            
            if (singlecommand != undefined){</pre></td></tr><tr class="docu"><td class="comment"><p>If this is an initialization of a single command, all we have to do is execute that one command:</p>
</td><td class="code"><pre class="linenumbers">571
572
573</pre><pre class="prettyprint">                plugin.executeCommand($el, singlecommand, options);
            
            } else {</pre></td></tr><tr class="docu"><td class="comment"><p>It's now time to find all DOM nodes that want to execute a jKit command. You can either use the <strong>data-jkit</strong> attribute,
or the <strong>rel</strong> attribute. <strong>However, we strongly recommend to use the data-jkit attribute!</strong> The rel attribute support
will probably removed at some point.</p>
</td><td class="code"><pre class="linenumbers">579
580
581</pre><pre class="prettyprint">                $el.find(&quot;*[rel^=jKit], *[&quot;+s.dataAttribute+&quot;]&quot;).each( function(){
                    
                    var that = this;</pre></td></tr><tr class="docu"><td class="comment"><p>Get the rel or data-jkit attribute and extract all individual commands (they have to be inside square brackets):</p>
</td><td class="code"><pre class="linenumbers">585
586
587
588
589
590
591
592
593
594
595</pre><pre class="prettyprint">                    var rel = $(this).attr('rel');
                    var data = $(this).attr(s.dataAttribute);
                    
                    if (data != undefined){
                        rel = $.trim(data).substring(1);
                    } else {
                        rel = $.trim(rel).substring(5);
                    }
                    rel = rel.substring(0, rel.length-1);
                    rel = rel.replace(/\]\s+\[/g, &quot;][&quot;);
                    relsplit = rel.split('][');</pre></td></tr><tr class="docu"><td class="comment"><p>Now look at each command seperately:</p>
</td><td class="code"><pre class="linenumbers">599</pre><pre class="prettyprint">                    $.each( relsplit, function(index, value){</pre></td></tr><tr class="docu"><td class="comment"><p>First convert all the escaped characters into internal jKit strings. Later we convert them back and unescape them.</p>
</td><td class="code"><pre class="linenumbers">603
604
605
606
607
608
609
610
611
612</pre><pre class="prettyprint">                        value = value
                                    .replace(/\\=/g,'|jkit-eq|')
                                    .replace(/\\:/g,'|jkit-dp|')
                                    .replace(/\\;/g,'|jkit-sc|')
                                    .replace(/\\\[/g,'|jkit-sbo|')
                                    .replace(/\\\]/g,'|jkit-sbc|')
                                    .replace(/\\\*/g,'|jkit-st|')
                                    .replace(/\\ /g,'|jkit-sp|');
                        
                        value = $.trim(value);</pre></td></tr><tr class="docu"><td class="comment"><p>Is this a macro call? Let's check if we find a macro with this name:</p>
</td><td class="code"><pre class="linenumbers">616</pre><pre class="prettyprint">                        if (s.macros[value] != undefined) value = s.macros[value];</pre></td></tr><tr class="docu"><td class="comment"><p>Now it's time to parse the options:</p>
</td><td class="code"><pre class="linenumbers">620</pre><pre class="prettyprint">                        var options = plugin.parseOptions(value);</pre></td></tr><tr class="docu"><td class="comment"><p>It's still possible that this is a macro, just with changed options. Let's check that and apply the macro if needed:</p>
</td><td class="code"><pre class="linenumbers">624
625
626
627
628</pre><pre class="prettyprint">                        if (s.macros[options.type] != undefined){
                            var macrooptions = plugin.parseOptions(s.macros[options.type]);
                            options.type = macrooptions.type;
                            options = $.extend({}, macrooptions, options);
                        }</pre></td></tr><tr class="docu"><td class="comment"><p>If this is a macro definition, add the current command string to the macros array:</p>
</td><td class="code"><pre class="linenumbers">632
633
634</pre><pre class="prettyprint">                        if (options.type == 'macro' &amp;&amp; relsplit[index-1] != undefined){
                            
                            plugin.settings.macros[options.name] = relsplit[index-1];</pre></td></tr><tr class="docu"><td class="comment"><p>If this is the special repeat command, parse the options and than add it to the delivered event handler:</p>
</td><td class="code"><pre class="linenumbers">638
639
640
641
642
643
644
645
646
647
648
649</pre><pre class="prettyprint">                        } else if (options.type == 'repeat' &amp;&amp; relsplit[index-1] != undefined){
                            
                            var prevoptions = plugin.parseOptions(relsplit[index-1]);
                            
                            $el.on( options.onevent, function(){
                                if (options.delay == undefined) options.delay = 0;
                                setTimeout( function(){
                                    plugin.executeCommand($(that), prevoptions.type, prevoptions);
                                }, options.delay);
                            });
                        
                        } else {</pre></td></tr><tr class="docu"><td class="comment"><p>Looks like this isn't one of the special use commands, so lets execute one of the regular ones.</p>
</td><td class="code"><pre class="linenumbers"></pre><pre class="prettyprint"></pre></td></tr><tr class="docu"><td class="comment"><p>If the targets option is set, we first have to find out to which target nodes we have to apply the command:</p>
</td><td class="code"><pre class="linenumbers">655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682</pre><pre class="prettyprint">                            var targets = [];
                            if (options.target != undefined){
                                
                                var targetsplit = options.target.split('.');
                                targetsplit = [targetsplit.shift(), targetsplit.join('.')]
                                if (targetsplit[1] == undefined){
                                    targetsplit[1] = '*';
                                }
                                
                                switch(targetsplit[0]){
                                    case 'children':
                                        $(that).children(targetsplit[1]).each( function(){
                                            targets.push(this);
                                        });
                                        break;
                                    case 'each':
                                        $(that).find(targetsplit[1]).each( function(){
                                            targets.push(this);
                                        });
                                        break;
                                    default:
                                        targets.push(that);
                                }
                            } else {
                                targets.push(that);
                            }
                            
                            $.each( targets, function(i,v){</pre></td></tr><tr class="docu"><td class="comment"><p>First parse all dynamic options. They are declared like this:</p>

<pre><code>[command:myoption={rand|0-1000}]
</code></pre>
</td><td class="code"><pre class="linenumbers">689</pre><pre class="prettyprint">                                var thisoptions = plugin.parseDynamicOptions(options);</pre></td></tr><tr class="docu"><td class="comment"><p>Now it's time to find out what the command key is for this specific command call.
This can be set either by the commandkey option, the dot syntax or if both are not
set, we take the elements id attribute or as a last option, we just generate an unique id.</p>
</td><td class="code"><pre class="linenumbers">695
696
697
698
699
700
701
702</pre><pre class="prettyprint">                                if (thisoptions.commandkey == undefined){
                                    var id = $(v).attr(&quot;id&quot;);
                                    if (id != undefined){
                                        thisoptions.commandkey = id;
                                    } else {
                                        thisoptions.commandkey = s.prefix+'-uid-'+(++uid);
                                    }
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>Now as we have the commandkey, we store it in the plugins commandkey array together
with some other useful information for later use:</p>
</td><td class="code"><pre class="linenumbers">707
708
709
710
711
712
713</pre><pre class="prettyprint">                                if (thisoptions.commandkey != undefined){
                                    commandkeys[thisoptions.commandkey] = {
                                        'el': v,
                                        'options': thisoptions,
                                        'execs': 0
                                    };
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>Next we need to check if we have to immediately execute the command or if we have to
execute it later on a specific event:</p>
</td><td class="code"><pre class="linenumbers">718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733</pre><pre class="prettyprint">                                if (thisoptions.onevent !== undefined || thisoptions.andonevent !== undefined){
                                    
                                    var events = [];
                                    if (thisoptions.onevent !== undefined) events.push(thisoptions.onevent);
                                    if (thisoptions.andonevent !== undefined) events.push(thisoptions.andonevent);
                                    var e = events.join(' ');
                                    
                                    $el.on( e, function(){
                                        if (s.replacements[thisoptions.type] != undefined &amp;&amp; typeof(s.replacements[thisoptions.type]) === &quot;function&quot;){
                                            s.replacements[thisoptions.type].call(plugin, v, thisoptions.type, thisoptions);
                                        } else {
                                            plugin.executeCommand(v, thisoptions.type, thisoptions);
                                        }
                                    });
                                
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>If we don't have an event set, we execute it immediately:</p>
</td><td class="code"><pre class="linenumbers">737</pre><pre class="prettyprint">                                if (thisoptions.onevent === undefined){</pre></td></tr><tr class="docu"><td class="comment"><p>Check if a command replacement for this command is available and if yes, call it.</p>
</td><td class="code"><pre class="linenumbers">741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759</pre><pre class="prettyprint">                                    if (s.replacements[thisoptions.type] != undefined &amp;&amp; typeof(s.replacements[thisoptions.type]) === &quot;function&quot;){
                                        s.replacements[thisoptions.type].call(plugin, v, thisoptions.type, thisoptions);
                                    } else {
                                        plugin.executeCommand(v, thisoptions.type, thisoptions);
                                    }
                                
                                }
                            
                            });
                        
                        }
                    
                    });
                
                });
            
            }
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="applymacro">applyMacro</h3>

<p>The <strong>applyMacro</strong> function lets us execute predefined macros.</p>
</td><td class="code"><pre class="linenumbers">765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780</pre><pre class="prettyprint">        plugin.applyMacro = function($el, macro){
            
            var s = plugin.settings;
            
            if (s.macros[macro] != undefined){
                var value = s.macros[macro];
                var options = plugin.parseOptions(value);
                
                if (s.replacements[options.type] != undefined &amp;&amp; typeof(s.replacements[options.type]) === &quot;function&quot;){
                    s.replacements[options.type].call(plugin, $el, options.type, options);
                } else {
                    plugin.executeCommand($el, options.type, options);
                }
            }
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="parseoptions">parseOptions</h3>

<p>The <strong>parseOptions</strong> function takes a command string and creates an array out of it with all options.
It automatically detects the command type and command key. An input string can look like this
(optionally with additional spaces and newlines):</p>

<pre><code>mycommand.mykey:firstoption=value1;secondoption=value2
</code></pre>
</td><td class="code"><pre class="linenumbers">791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817</pre><pre class="prettyprint">        plugin.parseOptions = function(string){
            
            var relsplit = string.split(':');
            var commandsplit = relsplit[0].split('.');
            
            var options = { 'type': $.trim(commandsplit[0]) };
            
            if (commandsplit[1] !== undefined){
                options['commandkey'] = commandsplit[1];
            }
            
            if (options.execute == undefined){
                options.execute = 'always';
            }
            
            if (relsplit.length &gt; 1){
                var optionssplit = relsplit[1].split(';');
                
                $.each( optionssplit, function(key, value){
                    var optionssplit2 = value.split('=');
                    options[$.trim(optionssplit2[0])] = $.trim(optionssplit2[1]);
                });
            }
            
            return options;
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="parsedynamicoptions">parseDynamicOptions</h3>

<p>The <strong>parseDynamicOptions</strong> looks for dynamic options that look like this:</p>

<pre><code>[command:myoption={rand|0-1000}]
</code></pre>

<p>Currently only the random options are supported, but more stuff is planned, like increase or decrease.</p>
</td><td class="code"><pre class="linenumbers">827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878</pre><pre class="prettyprint">        plugin.parseDynamicOptions = function(options){
            
            var parsedoptions = {};
            
            for (index in options){
                var v = options[index];
                
                if (v !== undefined &amp;&amp; v.indexOf(&quot;{&quot;) &gt; -1 &amp;&amp; v.indexOf(&quot;|&quot;) &gt; 0 &amp;&amp; v.indexOf(&quot;}&quot;) &gt; 1){
                    
                    var option = '';
                    var dyn = false;
                    var dynstr = '';
                    var parse = false;
                    
                    for (var i=0; i&lt;=(v.length-1);i++){
                        
                        if (!dyn &amp;&amp; v.charAt(i) == '{'){
                            dyn = true;
                        } else if (dyn &amp;&amp; v.charAt(i) == '}'){
                            dyn = false;
                            parse = true;
                        }
                        
                        if (dyn || parse){
                            dynstr += v.charAt(i);
                            if (parse){
                                dynstr = dynstr.slice(1, -1);
                                var dynsplit = dynstr.split('|');
                                
                                if (dynsplit[0] == 'rand'){
                                    var valsplit = dynsplit[1].split('-');
                                    option += plugin.getRandom(Number(valsplit[0]), Number(valsplit[1]));
                                }
                                
                                parse = false;
                                dynstr = '';
                            }
                        } else {
                            option += v.charAt(i);
                        }
                        
                    }
                    
                    parsedoptions[index] = option;
                    
                } else {
                    parsedoptions[index] = v;
                }
            }
            
            return parsedoptions;
        }</pre></td></tr><tr class="docu"><td class="comment"><h3 id="getrandom">getRandom</h3>

<p>The <strong>getRandom</strong> function simply generates a random number between a minimum number and a maximum number.</p>
</td><td class="code"><pre class="linenumbers">884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900</pre><pre class="prettyprint">        plugin.getRandom = function(min, max) {
            if(min &gt; max) {
                return -1;
            }
            
            if(min == max) {
                return min;
            }
            
            var r;
            do {
                r = Math.random();
            }
            while(r == 1.0);
            
            return min + parseInt(r * (max-min+1));
        }</pre></td></tr><tr class="docu"><td class="comment"><h3 id="findelementtag">findElementTag</h3>

<p>The <strong>findElementTag</strong> function makes it possible to find the tag name of a specific element in a
previously defined structure. This makes it possible to write agnostic HTML for tab or similar structures.
For example on the tab command, both this structures would be succesfully detected:</p>

<pre><code>div (container)
    div (element)
        h3 (title)
        div (content)

ul (container)
    li (element)
        h2 (title)
        p (content)
</code></pre>

<p>Check the tab command to get an example of how to use the function.</p>
</td><td class="code"><pre class="linenumbers">920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964</pre><pre class="prettyprint">        plugin.findElementTag = function($container, selector, pos, defaultval){
            
            var output = '';
            
            if ( pos !== undefined &amp;&amp; !isNaN(pos) &amp;&amp; parseInt(pos) == pos ){
                if ($container.find(selector).length &gt; pos){
                    output = $($container.find(selector).get(pos)).prop('tagName');
                }
            } else { 
                
                var tags = {};
                
                $container.find(selector).each( function(i){
                    if (i &lt; 25){
                        var tag = $(this).prop('tagName');
                        if (tag[0] != ''){
                            if (tags[tag] !== undefined){
                                tags[tag]++;
                            } else {
                                tags[tag] = 1;
                            }
                        }
                    } else {
                        return false;
                    }
                });
                
                var max = 0;
                var maxkey = '';
                for (var key in tags){
                    if (tags[key] &gt; max){
                        max = tags[key];
                        maxkey = key;
                    }
                }
                output = maxkey;
            }
            
            if (output !== undefined &amp;&amp; output != ''){
                return output;
            } else {
                return defaultval;
            }
            
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="adddefaults">addDefaults</h3>

<p>The <strong>addDefaults</strong> function adds all the default options to the options array. Additionally
all speed options are fixed if needed.</p>
</td><td class="code"><pre class="linenumbers">971
972
973
974
975
976
977
978
979
980
981
982
983</pre><pre class="prettyprint">        plugin.addDefaults = function(command, options){
            
            if (plugin.settings.commands[command] != undefined){
                var c = plugin.settings.commands[command];
                
                $.each(c, function(i, v){
                    if (options[i] == undefined) options[i] = v;
                    if (i.indexOf('speed') &gt; -1) options[i] = plugin.fixSpeed(options[i]);
                });
            }
            
            return options;
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="executecommand">executeCommand</h3>

<p>The <strong>executeCommand</strong> function is used to execute a command on a specific DOM node with an array of options.</p>
</td><td class="code"><pre class="linenumbers">989
990
991
992</pre><pre class="prettyprint">        plugin.executeCommand = function(that, type, options){
            
            var s = plugin.settings;
            var $that = $(that);</pre></td></tr><tr class="docu"><td class="comment"><p>Trigger the <strong>jkit-commandinit</strong> event on the main element with all useful information attached to it.
This event is currently not used internally, but can of course be listened to from outside the plugin.</p>
</td><td class="code"><pre class="linenumbers">997</pre><pre class="prettyprint">            $element.trigger('jkit-commandinit', { 'element': $that, 'type': type, 'options': options });</pre></td></tr><tr class="docu"><td class="comment"><p>Check if there is a limit set on how many times we're allowed to execute this command (based on the command key)</p>
</td><td class="code"><pre class="linenumbers">1001
1002
1003
1004
1005
1006</pre><pre class="prettyprint">            if (options.commandkey !== undefined){
                commandkeys[options.commandkey]['execs']++;
                if ((options.execute == 'once' &amp;&amp; commandkeys[options.commandkey]['execs'] &gt; 1) || (!isNaN(options.execute) &amp;&amp; commandkeys[options.commandkey]['execs'] &gt; options.execute)){
                    return $that;
                }
            }</pre></td></tr><tr class="docu"><td class="comment"><p>Add all default options where there isn't an option set:</p>
</td><td class="code"><pre class="linenumbers">1010
1011
1012</pre><pre class="prettyprint">            options = plugin.addDefaults(type, options);
            
            $.each( options, function(i,v){</pre></td></tr><tr class="docu"><td class="comment"><p>Convert jKit's special escaping strings to their regular characters:</p>
</td><td class="code"><pre class="linenumbers">1016
1017
1018
1019
1020
1021
1022
1023
1024
1025</pre><pre class="prettyprint">                if (typeof v == 'string'){
                    options[i] = v = v
                        .replace(/\|jkit\-eq\|/g,'=')
                        .replace(/\|jkit\-dp\|/g,':')
                        .replace(/\|jkit\-sc\|/g,';')
                        .replace(/\|jkit\-sbo\|/g,'[')
                        .replace(/\|jkit\-sbc\|/g,']')
                        .replace(/\|jkit\-st\|/g,'*')
                        .replace(/\|jkit\-sp\|/g,' ');
                }</pre></td></tr><tr class="docu"><td class="comment"><p>Call or get all dynamic options (those with an asterix at the end):</p>
</td><td class="code"><pre class="linenumbers">1029
1030
1031
1032
1033
1034
1035</pre><pre class="prettyprint">                if (typeof v == 'string' &amp;&amp; v.slice(-1) == '*'){
                    options[i] = window[v.slice(0, -1)];
                    if (typeof options[i] == 'function'){
                        options[i] = options[i].call(that);
                    }
                }
            });</pre></td></tr><tr class="docu"><td class="comment"><h4 id="commands">Commands</h4>

<p>Depending on the type of command, different actions are executed.</p>
</td><td class="code"><pre class="linenumbers">1041</pre><pre class="prettyprint">            switch(type){</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> command-paginate</span></td></tr><tr class="docu"><td class="comment"><h5 id="paginate">Paginate</h5>

<p>The <a href="http://jquery-jkit.com/commands/paginate.html">paginate command</a> lets you create paginated content.</p>
</td><td class="code"><pre class="linenumbers">1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064</pre><pre class="prettyprint">                case 'paginate':
                    
                    if (options.container != ''){
                        var $container = $that.find(options.container);
                    } else {
                        var $container = $that;
                    }
                    
                    if ($that.attr('id') !== undefined){
                        var paginateid = s.prefix+'-'+type+'-'+$that.attr('id');
                    } else {
                        var paginateid = s.prefix+'-'+type+'-uid-'+(++uid);
                    }
                    
                    var pages = [];
                    var page = [];</pre></td></tr><tr class="docu"><td class="comment"><p>Paginate has two ways to operate, either by node count or by actual element height in pixels.
In the <strong>node mode</strong> we put a specific amount of DOM nodes into each entry of the pages array.
In the <strong>height mode</strong> we actually measure the height of each element and only put DOM nodes into the current page
that actually fit into the maximum height the user has set.</p>
</td><td class="code"><pre class="linenumbers">1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114</pre><pre class="prettyprint">                    if (options.by == 'node'){
                        
                        var cnt = 1;
                        
                        $container.children().each( function(){
                            
                            cnt++;
                            page.push($(this).detach());
                            
                            if (cnt &gt; Number(options.limit)){
                                cnt = 1;
                                pages.push(page);
                                page = [];
                            }
                            
                        });
                        
                    } else {
                        
                        var height = 0;
                        
                        $container.children().each( function(){
                            
                            height += $(this).outerHeight();
                            
                            if (height &gt; Number(options.limit)){
                                height = $(this).outerHeight();
                                if (page.length &gt; 0){
                                    pages.push(page);
                                }
                                page = [];
                            }
                            
                            page.push($(this).detach());
                            
                        });
                        
                    }
                    
                    if (page.length &gt; 0){
                        pages.push(page);
                    }
                    
                    if (pages.length &gt; 1){</pre></td></tr><tr class="docu"><td class="comment"><p>Now as we have the pages set up correctly and we actually have more than one, it's time
to create the output DOM structure. The main element always gets the page data and the
actuall pagination is an unordered list we insert after that element.</p>
</td><td class="code"><pre class="linenumbers">1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161</pre><pre class="prettyprint">                        var $pagination = $('&lt;ul/&gt;', { 'id': paginateid, 'class': s.prefix+'-pagination' });
                        
                        $.each( pages, function(i,v){
                            
                            var $pnav = $('&lt;li/&gt;').html(i+1).on( 'click', function(){
                                
                                plugin.triggerEvent('showpage showpage'+(i+1), $that, options);
                                
                                $pagination.find('li').removeClass(s.activeClass);
                                $(this).addClass(s.activeClass);
                                
                                $container.jKit_effect(false, options.animation, options.speed, options.easing, 0, function(){
                                    $container.html('');
                                    $.each(v, function(index, value){
                                        value.clone().appendTo($container);
                                    });
                                    $container.jKit_effect(true, options.animation, options.speed, options.easing, 0);
                                });
                                
                            });
                            
                            if (i == 0){
                                $pnav.addClass(s.activeClass);
                            }
                            $pnav.appendTo($pagination);
                            
                        });
                        
                        if (options.pos == 'after'){
                            $pagination.insertAfter($that);
                        } else {
                            $pagination.insertBefore($that);
                        }
                        
                        $container.html('');
                        $.each(pages[0], function(index, value){
                            value.clone().appendTo($container);
                        });
                        
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-paginate, command-filter</span></td></tr><tr class="docu"><td class="comment"><h5 id="filter">Filter</h5>

<p>The <a href="http://jquery-jkit.com/commands/filter.html">filter command</a> lets you filter DOM nodes based on some input.</p>
</td><td class="code"><pre class="linenumbers">1171</pre><pre class="prettyprint">                case 'filter':</pre></td></tr><tr class="docu"><td class="comment"><p>The filter has to run on init and after every change of elements that have the <strong>jkit-filter</strong> class,
so we have our own function we can call on all those events, the <strong>filterElements</strong> function, and
let that function do all the hard work.</p>
</td><td class="code"><pre class="linenumbers">1177
1178
1179
1180
1181
1182
1183
1184</pre><pre class="prettyprint">                    plugin.filterElements($that, options);
                    
                    $that.find('.jkit-filter').on( 'change click', function(){
                        plugin.triggerEvent('clicked', $that, options);
                        plugin.filterElements($that, options);
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-paginate, command-summary</span></td></tr><tr class="docu"><td class="comment"><h5 id="summary">Summary</h5>

<p>The <a href="http://jquery-jkit.com/commands/summary.html">summary command</a> creates a summary on specific content, for example the headers in a content div.
The summary itself is either a linked list or a dropdown with automated events.</p>
</td><td class="code"><pre class="linenumbers">1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211</pre><pre class="prettyprint">                case 'summary':
                    
                    var output = '';
                    var jumpid = '';
                    
                    var pre = ''
                    if (options.scope == 'children'){
                        pre = '&gt; ';
                    }
                    
                    if (options.what == 'headers'){
                        options.what = ':header';
                    }
                    
                    $(options.from).find(pre+options.what).each( function(){
                        
                        var $current = $(this);</pre></td></tr><tr class="docu"><td class="comment"><p>If we're using all headers for our summary, than we have to do some extra work to get them
indented correctly.</p>
</td><td class="code"><pre class="linenumbers">1216
1217
1218
1219
1220
1221
1222
1223
1224
1225</pre><pre class="prettyprint">                        var space = '';
                        if (options.what == ':header' &amp;&amp; options.indent == 'yes'){
                            var tag = $current.prop('tagName');
                            if (tag.length == 2 &amp;&amp; tag[1] != ''){
                                var spaces = tag[1]-1;
                                for (var i=1; i&lt;=spaces;i++){
                                    space += '&amp;nbsp; &amp;nbsp; ';
                                }
                            }
                        }</pre></td></tr><tr class="docu"><td class="comment"><p>A summary can either be linked or just text:</p>
</td><td class="code"><pre class="linenumbers">1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259</pre><pre class="prettyprint">                        if (options.linked == 'yes'){
                            
                            if ($current.attr('id') !== undefined){
                                var id = $current.attr('id');
                            } else {
                                var id = s.prefix+'-uid-'+(++uid);
                                $current.attr('id', id);
                            }
                            
                            if (window.location.hash == '#'+id){
                                jumpid = id;
                            }
                            
                            if (options.style == 'select'){
                                output += '&lt;option value=&quot;'+id+'&quot;&gt;'+space+$(this).text()+'&lt;/option&gt;';
                            } else {
                                output += '&lt;li&gt;&lt;a href=&quot;#'+id+'&quot;&gt;'+space+$(this).text()+'&lt;/a&gt;&lt;/li&gt;';
                            }
                            
                        } else {
                            if (options.style == 'select'){
                                output += '&lt;option value=&quot;&quot;&gt;'+space+$(this).text()+'&lt;/option&gt;';
                            } else {
                                output += '&lt;li&gt;'+space+$(this).text()+'&lt;/li&gt;';
                            }
                        }
                    });
                    
                    if (output != ''){
                        
                        $that.html('&lt;'+options.style+'&gt;'+output+'&lt;/'+options.style+'&gt;');</pre></td></tr><tr class="docu"><td class="comment"><p>In case this is a dropdown summary that is linked, we have to manually add
an event on change so we can jump to the anchors as needed:</p>
</td><td class="code"><pre class="linenumbers">1264
1265
1266
1267
1268
1269</pre><pre class="prettyprint">                        if (options.style == 'select' &amp;&amp; options.linked == 'yes'){
                            $that.find('select').on( 'change', function(){
                                window.location.hash = '#'+$(this).val();
                                $(this).blur();
                            });
                        }</pre></td></tr><tr class="docu"><td class="comment"><p>And lastly if we create a select and have detected a hash, we need to set that select to the correct value
and jump to the correct element:</p>
</td><td class="code"><pre class="linenumbers">1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287</pre><pre class="prettyprint">                        if (options.style == 'select' &amp;&amp; options.linked == 'yes' &amp;&amp; jumpid != ''){
                            
                            $that.find('select').val(jumpid);
                            
                            if ($that.find('#'+jumpid).offset() !== undefined){
                                var ypos = $that.find('#'+jumpid).offset().top;
                                $('html, body').css({ scrollTop: ypos+'px' });
                            }
                            
                        }
                        
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-summary, command-api</span></td></tr><tr class="docu"><td class="comment"><h5 id="api">API</h5>

<p>The <a href="http://jquery-jkit.com/commands/api.html">API command</a> lets you use JSON based API's to display external data. Check the <strong>plugin.readAPI</strong> for how it's done.</p>
</td><td class="code"><pre class="linenumbers">1297
1298
1299
1300
1301
1302
1303</pre><pre class="prettyprint">                case 'api':
                    
                    if (options.url != ''){
                        plugin.readAPI($that, options);
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-api, command-zoom</span></td></tr><tr class="docu"><td class="comment"><h5 id="zoom">Zoom</h5>

<p>The <a href="http://jquery-jkit.com/commands/zoom.html">zoom command</a> makes it possible to zoom into images on mouseover. To do that it
overlays the selected image with a div that has that image as its background.</p>
</td><td class="code"><pre class="linenumbers">1314
1315
1316
1317
1318
1319
1320
1321
1322
1323
1324
1325
1326
1327
1328
1329
1330
1331
1332
1333
1334
1335
1336
1337
1338
1339
1340
1341
1342</pre><pre class="prettyprint">                case 'zoom':
                    
                    $that.parent().css('position', 'relative');
                    
                    $that.on( 'mouseover', function(){
                        
                        var pos = $that.position();
                        var height = $that.height();
                        var width = $that.width();
                        
                        $zoom = $('&lt;div/&gt;', {
                            'class': s.prefix+'-'+type+'-overlay'
                        }).css( {
                            'position': 'absolute',
                            'height': height+'px',
                            'width': width+'px',
                            'left': pos.left + 'px',
                            'top': pos.top + 'px',
                            'overflow': 'hidden',
                            'background-image': 'url('+$that.attr('src')+')',
                            'background-repeat': 'no-repeat',
                            'background-color': '#000',
                            'opacity': 0
                        }).on( 'mouseout', function(){
                            $zoom.fadeTo(options.speed, 0, function(){
                                $zoom.remove();
                                plugin.triggerEvent('zoomout', $that, options);
                            });
                        }).mousemove(function(e){</pre></td></tr><tr class="docu"><td class="comment"><p>Detect the mouse poition relative to the selected image:</p>
</td><td class="code"><pre class="linenumbers">1346
1347
1348
1349</pre><pre class="prettyprint">                            var offset = $(this).offset();
                            
                            var x = (e.pageX - offset.left) * (options.scale-1);
                            var y = (e.pageY - offset.top) * (options.scale-1);</pre></td></tr><tr class="docu"><td class="comment"><p>And than move the background image of the overlayed div:</p>
</td><td class="code"><pre class="linenumbers">1353
1354
1355
1356
1357</pre><pre class="prettyprint">                            $zoom.css('background-position', '-'+x+'px -'+y+'px');
                        
                        }).fadeTo(options.speed, 1, function(){
                            plugin.triggerEvent('zoomin', $that, options);
                        }).insertAfter($that);</pre></td></tr><tr class="docu"><td class="comment"><p>Optionally add a lightbox to the overlay image:</p>
</td><td class="code"><pre class="linenumbers">1361
1362
1363
1364
1365
1366
1367</pre><pre class="prettyprint">                        if (options.lightbox == 'yes'){
                            plugin.executeCommand($zoom, 'lightbox', {});
                        }
                    
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-zoom, command-sort</span></td></tr><tr class="docu"><td class="comment"><h5 id="sort">Sort</h5>

<p>The <a href="http://jquery-jkit.com/commands/sort.html">sort command</a> helps you convert a normal table into a sortable table
by converting TH elements of a table into clickable buttons that sort the
table based on the data inside the same column as the TH.</p>
</td><td class="code"><pre class="linenumbers">1379</pre><pre class="prettyprint">                case 'sort':</pre></td></tr><tr class="docu"><td class="comment"><p>First we need to know the exact position of the current TH inside the heading TR, the index:</p>
</td><td class="code"><pre class="linenumbers">1383
1384
1385
1386
1387</pre><pre class="prettyprint">                    var index = $that.parent().children().index($that);
                    
                    $that.on('click', function(){
                        
                        plugin.triggerEvent('clicked', $that, options);</pre></td></tr><tr class="docu"><td class="comment"><p>First we have to create an array with the content we need to base the sort on:</p>
</td><td class="code"><pre class="linenumbers">1391
1392
1393
1394
1395
1396
1397
1398
1399
1400
1401
1402
1403
1404
1405
1406
1407
1408
1409
1410
1411
1412
1413
1414
1415
1416
1417
1418</pre><pre class="prettyprint">                        var rows = [];
                        $that.parent().parent().parent().find('tbody &gt; tr').each( function(){
                            
                            var $td = $(this).find('td:nth-child('+(index+1)+')');
                            
                            switch(options.what){
                                case 'html':
                                    var str = $td.html();
                                    break;
                                case 'class':
                                    var str = $td.attr('class');
                                    break;
                                default:
                                    var str = $td.text();
                                    break;
                            }
                            
                            if (options.start &gt; 0 || options.end &gt; 0){
                                if (options.end &gt; options.start){
                                    str = str.substring(options.start, options.end);
                                } else {
                                    str = str.substring(options.start);
                                }
                            }
                            
                            rows.push({ 'content': $(this).html(), 'search': str });
                        
                        });</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.task.png">  task</span>:<span class="iopt"> It should be possible to use way less code in the code below!</span></td></tr><tr class="docu"><td class="comment"><p>Now sort the array. There are currently three different ways to sort:</p>

<ul>
<li><strong>alpha</strong>: Will sort the array by the alphabetically</li>
<li><strong>num</strong>: Will sort the array numerically</li>
<li><strong>date</strong>: Will sort the array as a date</li>
</ul>

<p>Depending on the current class of the TH, we either sort ascending or descending.</p>
</td><td class="code"><pre class="linenumbers">1430
1431
1432
1433
1434
1435
1436
1437
1438
1439
1440
1441
1442
1443
1444
1445
1446
1447
1448
1449
1450
1451
1452
1453
1454
1455
1456
1457
1458
1459
1460
1461
1462
1463
1464
1465
1466</pre><pre class="prettyprint">                        if ($that.hasClass(s.prefix+'-'+type+'-down')){
                            $that.parent().find('th').removeClass(s.prefix+'-'+type+'-down').removeClass(s.prefix+'-'+type+'-up');
                            $that.addClass(s.prefix+'-'+type+'-up');
                            rows.sort( function(a,b){
                                if (options.by == 'num'){
                                    a.search = Number(a.search);
                                    b.search = Number(b.search);
                                }
                                if (options.by == 'date'){
                                    var a = new Date(a.search);
                                    var b = new Date(b.search);
                                    return (a.getTime() - b.getTime());
                                } else {
                                    if (a.search &gt; b.search) return -1;
                                    if (a.search &lt; b.search) return 1;
                                    return 0;
                                }
                            });
                        } else {
                            $that.parent().find('th').removeClass(s.prefix+'-'+type+'-down').removeClass(s.prefix+'-'+type+'-up');
                            $that.addClass(s.prefix+'-'+type+'-down');
                            rows.sort( function(a,b){
                                if (options.by == 'num'){
                                    a.search = Number(a.search);
                                    b.search = Number(b.search);
                                }
                                if (options.by == 'date'){
                                    var a = new Date(a.search);
                                    var b = new Date(b.search);
                                    return (b.getTime() - a.getTime());
                                } else {
                                    if (a.search &lt; b.search) return -1;
                                    if (a.search &gt; b.search) return 1;
                                    return 0;
                                }
                            });
                        }</pre></td></tr><tr class="docu"><td class="comment"><p>Everything is ready, let's clear the whole TBODY of the table and add the sorted rows:</p>
</td><td class="code"><pre class="linenumbers">1470
1471
1472
1473
1474
1475
1476
1477
1478
1479
1480
1481
1482
1483
1484</pre><pre class="prettyprint">                        var $body = $that.parent().parent().parent().find('tbody');
                        $body.html('');
                        
                        var tbody = '';
                        $.each( rows, function(i,v){
                            tbody += '&lt;tr&gt;'+v.content+'&lt;/tr&gt;';
                        });
                        
                        $body.html(tbody);
                        
                        plugin.triggerEvent('complete', $that, options);
                    
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-sort, command-ticker</span></td></tr><tr class="docu"><td class="comment"><h5 id="ticker">Ticker</h5>

<p>The <a href="http://jquery-jkit.com/commands/ticker.html">ticker command</a> goes through each item of a list and reveals
the item one character at a time.</p>
</td><td class="code"><pre class="linenumbers">1495
1496
1497</pre><pre class="prettyprint">                case 'ticker':
                    
                    var containerTag = plugin.findElementTag($that, '&gt;', 'max', 'li');</pre></td></tr><tr class="docu"><td class="comment"><p>Create an array with objects that contain all useful information of a single ticker item:</p>
</td><td class="code"><pre class="linenumbers">1501
1502
1503
1504
1505
1506
1507
1508
1509</pre><pre class="prettyprint">                    var messages = [];
                    
                    $that.find(containerTag).each( function(){
                        messages.push({
                            'href': $(this).find('a').attr('href'),
                            'target': $(this).find('a').attr('target'),
                            'text': $(this).text()
                        });
                    });</pre></td></tr><tr class="docu"><td class="comment"><p>Replace the target element with a DIV and start the ticker function:</p>
</td><td class="code"><pre class="linenumbers">1513
1514
1515
1516
1517</pre><pre class="prettyprint">                    var $newThat = $('&lt;div/&gt;');
                    $that.replaceWith($newThat);
                    window.setTimeout( function() { plugin.ticker($newThat, options, messages, 0, 0); }, 0);
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-ticker, command-swap</span></td></tr><tr class="docu"><td class="comment"><h5 id="swap">Swap</h5>

<p>The <a href="http://jquery-jkit.com/commands/swap.html">swap command</a> replaces a DOM node attribute, for
example an image, with another value on hover.</p>
</td><td class="code"><pre class="linenumbers">1528
1529
1530</pre><pre class="prettyprint">                case 'swap':
                    
                    var versions = options.versions.split(s.delimiter);</pre></td></tr><tr class="docu"><td class="comment"><p>We have to store the original attributes value to swap the attribute back on mouseleave:</p>
</td><td class="code"><pre class="linenumbers">1534
1535</pre><pre class="prettyprint">                    var original = $that.attr(options.attribute);
                    var replacement = $that.attr(options.attribute).replace(versions[0],versions[1]);</pre></td></tr><tr class="docu"><td class="comment"><p>In case the attribute is an image source, we have to preload the image or the swapping could have a delay:</p>
</td><td class="code"><pre class="linenumbers">1539
1540
1541</pre><pre class="prettyprint">                    if (options.attribute == 'src'){
                        $('&lt;img/&gt;')[0].src = replacement;
                    }</pre></td></tr><tr class="docu"><td class="comment"><p>Finally, add the two event handlers with the swapping code:</p>
</td><td class="code"><pre class="linenumbers">1545
1546
1547
1548
1549
1550
1551
1552
1553</pre><pre class="prettyprint">                    $that.mouseenter(function(){
                        $that.attr(options.attribute, replacement );
                        plugin.triggerEvent('active', $that, options);
                    }).mouseleave(function(){
                        $that.attr(options.attribute, original );
                        plugin.triggerEvent('inactive', $that, options);
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-swap, command-fontsize</span></td></tr><tr class="docu"><td class="comment"><h5 id="fontsize">Fontsize</h5>

<p>The <a href="http://jquery-jkit.com/commands/fontsize.html">fontsize command</a> can be used to change the size of text.
It can be limited to specific elements. You can even use it to change other CSS related sizes, for example the
width of an element, with the <strong>style</strong> option.</p>
</td><td class="code"><pre class="linenumbers">1565
1566
1567
1568
1569
1570
1571
1572
1573
1574
1575
1576
1577
1578
1579
1580
1581
1582
1583
1584</pre><pre class="prettyprint">                case 'fontsize':
                    
                    $that.on( 'click', function(){
                        
                        $element.find(options.affected).each( function(){
                            
                            var newsize = parseInt($(this).css(options.style)) + parseInt(options.steps);
                            
                            if (newsize &gt;= parseInt(options.min) &amp;&amp; newsize &lt;= parseInt(options.max) ){
                                $(this).css(options.style, newsize );
                            }
                        
                        });
                        
                        plugin.triggerEvent('changed', $that, options);
                        
                        return false;
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-fontsize, command-fontsize</span></td></tr><tr class="docu"><td class="comment"><h5 id="cycle">Cycle</h5>

<p>The <a href="http://jquery-jkit.com/commands/cycle.html">cycle command</a> let's you "cycle" through
a sequence of values and apply them to a set of DOM nodes. This can be classes, html, attributes or css.</p>
</td><td class="code"><pre class="linenumbers">1595
1596
1597
1598
1599
1600
1601
1602
1603
1604
1605
1606
1607
1608
1609
1610
1611
1612
1613
1614</pre><pre class="prettyprint">                case 'cycle':
                    
                    var seq = options.sequence.split(s.delimiter);
                    var pos = 0;
                    
                    var sel = options.where;
                    if (options.scope == 'children'){
                        sel = '&gt; '+sel;
                    }
                    
                    $that.find(sel).each( function(){
                        if (seq[pos] != undefined &amp;&amp; seq[pos] != ''){
                            switch(options.what){
                                case 'class':
                                    $(this).addClass(seq[pos]);
                                    break;
                                case 'html':
                                    $(this).html(seq[pos]);
                                    break;
                                default:</pre></td></tr><tr class="docu"><td class="comment"><p>If it's not a class or html, it has to be a dot separated combination like for exmaple
<strong>css.color</strong> or <strong>attr.id</strong>, so split it:</p>
</td><td class="code"><pre class="linenumbers">1619
1620
1621
1622
1623
1624
1625
1626
1627
1628
1629
1630
1631</pre><pre class="prettyprint">                                    var what = options.what.split('.');
                                    if (what[0] == 'attr'){
                                        $(this).attr(what[1], seq[pos]);
                                    } else if (what[0] == 'css'){
                                        $(this).css(what[1], seq[pos]);
                                    }
                            }
                        }
                        pos++;
                        if (pos &gt; seq.length-1) pos = 0;
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-cycle, command-replace</span></td></tr><tr class="docu"><td class="comment"><h5 id="replace">Replace</h5>

<p>The <a href="http://jquery-jkit.com/commands/replace.html">replace command</a> makes it possible to replace content
based on a regex pattern. It acts on the HTML level, so not only text is replacable!</p>
</td><td class="code"><pre class="linenumbers">1642
1643
1644
1645
1646
1647</pre><pre class="prettyprint">                case 'replace':
                    
                    var str = new RegExp(options.search, options.modifier);
                    $that.html($that.html().replace(str,options.replacement));
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-replace, command-replace</span></td></tr><tr class="docu"><td class="comment"><h5 id="ajax">Ajax</h5>

<p>The <a href="http://jquery-jkit.com/commands/ajax.html">ajax command</a> can do a few thing. The normal use case is a link
that loads some extra content through an ajax call on click. But the command can be used to lazy load images, too.</p>
</td><td class="code"><pre class="linenumbers">1658</pre><pre class="prettyprint">                case 'ajax':</pre></td></tr><tr class="docu"><td class="comment"><p>If the href option is set, take it from the option, if not, take it from our element:</p>
</td><td class="code"><pre class="linenumbers">1662
1663
1664
1665
1666
1667
1668</pre><pre class="prettyprint">                    if (options.href != undefined &amp;&amp; options.href != ''){
                        var href = options.href;
                    } else {
                        var href = $that.attr('href');
                    }
                    
                    if (options.when == 'load' || options.when == 'viewport'){</pre></td></tr><tr class="docu"><td class="comment"><p>If the option <strong>when</strong> is **load*, than we're just loading the content:</p>
</td><td class="code"><pre class="linenumbers">1672
1673
1674
1675</pre><pre class="prettyprint">                        if (options.when == 'load'){
                            $that.load(href, function(){
                                plugin.triggerEvent('complete', $that, options);
                            });</pre></td></tr><tr class="docu"><td class="comment"><p>If it's <strong>viewport</strong>, we're going to wait till the content enters the viewport before
we load the content or the image (lazy load), whatever our options say:</p>
</td><td class="code"><pre class="linenumbers">1680
1681
1682
1683
1684
1685
1686
1687
1688
1689
1690
1691
1692
1693
1694</pre><pre class="prettyprint">                        } else {
                            var myInterval = setInterval(function(){
                                if ($that.jKit_inViewport() || !$that.jKit_inViewport() &amp;&amp; s.ignoreViewport){
                                    if (options.src != undefined){
                                        $that.attr('src', options.src);
                                        plugin.triggerEvent('complete', $that, options);
                                    } else {
                                        $that.load(href, function(){
                                            plugin.triggerEvent('complete', $that, options);
                                        });
                                    }
                                    window.clearInterval(myInterval);
                                }
                            },100);
                        }</pre></td></tr><tr class="docu"><td class="comment"><p>This is our default use case, load the content on click:</p>
</td><td class="code"><pre class="linenumbers">1698
1699
1700
1701
1702
1703
1704
1705</pre><pre class="prettyprint">                    } else {
                        $that.on('click', function(){
                            plugin.loadAndReplace(href, options, $that);
                            return false;
                        });
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-ajax, command-key</span></td></tr><tr class="docu"><td class="comment"><h5 id="key">Key</h5>

<p>The <a href="http://jquery-jkit.com/commands/key.html">key command</a> let's us create hotkeys
for links. If thge link has an <strong>onclick</strong> attribute, we fire that one, if not, we're just
going to open the href, either as a popup or inside the same window, whatever the target
attribute tells us.</p>
</td><td class="code"><pre class="linenumbers">1718
1719
1720</pre><pre class="prettyprint">                case 'key':
                    
                    if (options.code != undefined){</pre></td></tr><tr class="docu"><td class="comment"><p>First we need to add the event handling for this keycode to the element ...</p>
</td><td class="code"><pre class="linenumbers">1724</pre><pre class="prettyprint">                        plugin.addKeypressEvents($that, options.code);</pre></td></tr><tr class="docu"><td class="comment"><p>Because only now we can listen to it:</p>
</td><td class="code"><pre class="linenumbers">1728
1729
1730
1731
1732</pre><pre class="prettyprint">                        $that.on( options.code, function(){
                            if ($that.attr('onclick') !== undefined){
                                $that.click();
                            } else {
                                if ($that.attr('target') !== undefined &amp;&amp; $that.attr('target') == '_blank'){</pre></td></tr><tr class="docu"><td class="comment"><p>Sadly we can't open pages in a new tab or regular window, so we have to open it in a popup instead:</p>
</td><td class="code"><pre class="linenumbers">1736
1737
1738
1739
1740
1741
1742
1743
1744
1745
1746
1747</pre><pre class="prettyprint">                                    window.open($that.attr('href'), '_blank', false);
                                } else {
                                    window.location.href = $that.attr('href');
                                }
                            }
                            if (options.macro != undefined) plugin.applyMacro($that, options.macro);
                            plugin.triggerEvent('pressed', $that, options);
                        });
                    
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-key, command-live</span></td></tr><tr class="docu"><td class="comment"><h5 id="live">Live</h5>

<p>The <a href="http://jquery-jkit.com/commands/live.html">live command</a> is very simple. All it does is reload
the source of an image or iframe in a certain interval and making sure that it doesn't load the cashed version.</p>
</td><td class="code"><pre class="linenumbers">1758
1759
1760
1761
1762
1763
1764
1765
1766
1767</pre><pre class="prettyprint">                case 'live':
                    
                    if ($that.attr('src') !== undefined) {
                        window.setInterval( function() {
                            plugin.updateSrc($that, options);
                            plugin.triggerEvent('reloaded', $that, options);
                        }, options.interval*1000);
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-live, command-split</span></td></tr><tr class="docu"><td class="comment"><h5 id="split">Split</h5>

<p>The <a href="http://jquery-jkit.com/commands/split.html">split command</a> can take a string, for example a comma separeted one,
and create new HTML elements out of the individual parts. This way a simple comma separated list can be transformed
into an unordered list.</p>
</td><td class="code"><pre class="linenumbers">1779
1780
1781
1782
1783
1784
1785
1786
1787
1788
1789
1790</pre><pre class="prettyprint">                case 'split':
                    
                    var parts = $that.text().split(options.separator);
                    $that.html('');
                    
                    $.each( parts, function(i,v){
                        $('&lt;'+options.container+'/&gt;').text(v).appendTo($that);
                    });
                    
                    $that.html(options.before+$that.html()+options.after);
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-split, command-encode</span></td></tr><tr class="docu"><td class="comment"><h5 id="encode">Encode</h5>

<p>The <a href="http://jquery-jkit.com/commands/encode.html">encode command</a> apply various encodings to the content of an element.
If the option is code, the content is not only HTML encoded, it can even remove the extra tab whitespace you get if you
have that content indented inside the code element.</p>
</td><td class="code"><pre class="linenumbers">1802
1803
1804
1805
1806
1807
1808
1809
1810
1811
1812
1813
1814
1815
1816
1817
1818
1819
1820
1821
1822
1823</pre><pre class="prettyprint">                case 'encode':
                    
                    switch(options.format) {
                        case 'code':
                            var src = $that.html();
                            if (options.fix == 'yes'){
                                src = plugin.preFix(src);
                            }
                            $that.html(src.replace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;'));
                            break;
                        case 'text':
                            $that.html($that.text());
                            break;
                        case 'esc':
                            $that.html(escape($that.html()));
                            break;
                        case 'uri':
                            $that.html(encodeURI($that.html()));
                            break;
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-encode, command-chart</span></td></tr><tr class="docu"><td class="comment"><h5 id="chart">Chart</h5>

<p>The <a href="http://jquery-jkit.com/commands/chart.html">chart command</a> let's us create simple horizontal bar charts using
different sized divs. This is definitely a good candidate for a command replacement using the canvas element to draw
different charts.</p>
</td><td class="code"><pre class="linenumbers">1835
1836
1837
1838
1839
1840
1841
1842
1843
1844
1845
1846
1847
1848
1849
1850
1851
1852
1853
1854
1855
1856
1857
1858
1859
1860
1861
1862
1863
1864
1865
1866
1867
1868
1869
1870
1871
1872
1873
1874
1875
1876
1877
1878
1879
1880
1881
1882
1883
1884
1885
1886
1887
1888
1889
1890
1891
1892
1893
1894
1895
1896
1897
1898
1899
1900
1901
1902
1903
1904
1905
1906
1907
1908
1909
1910
1911</pre><pre class="prettyprint">                case 'chart':
                    
                    var label = $that.find('thead &gt; tr &gt; th.label').text();
                    var id = $that.attr('id');
                    
                    var datalabels = [];
                    
                    $that.find('thead &gt; tr &gt; th').each( function(){
                        if (!$(this).hasClass('label')){
                            datalabels.push( $(this).text() );
                        }
                    });
                    
                    var max = 0;
                    
                    var plots = [];
                    $that.find('tbody tr').each( function(){
                        var plot = { 'label': $(this).find('th.label').text(), 'data': [] };
                        $(this).find('th').each( function(){
                            if (!$(this).hasClass('label')){
                                var val = Number($(this).text());
                                max = Math.max(val, max);
                                plot.data.push(val);
                            }
                        });
                        plots.push(plot);
                    });
                    
                    if (options.max &gt; 0 &amp;&amp; max &lt; options.max){
                        max = options.max;
                    }
                    
                    var $chart = $('&lt;div/&gt;', {
                        id: id,
                        'class': s.prefix+'-'+type
                    });
                    
                    var steps = 0;
                    
                    var delay = 0;
                    $.each(datalabels, function(i,v){
                        
                        steps++;
                        var $step = $('&lt;div/&gt;', { 'class': s.prefix+'-'+type+'-step' }).html('&lt;label&gt;'+v+'&lt;/label&gt;').appendTo($chart);
                        
                        $.each( plots, function(i2,v2){
                            
                            if (plots[i2].data[i] &gt; 0){
                                
                                var $plot = $('&lt;div/&gt;', { 'class': s.prefix+'-'+type+'-plot '+s.prefix+'-'+type+'-plot'+i2 }).appendTo($step);
                                
                                $('&lt;div/&gt;')
                                    .text(plots[i2].label)
                                    .delay(delay)
                                    .animate({ 'width': (plots[i2].data[i]/max*100)+'%' }, options.speed, options.easing)
                                    .appendTo($plot);
                                
                                $('&lt;span/&gt;', { 'class': s.prefix+'-'+type+'-info' })
                                    .text(label+' '+plots[i2].label+': '+plots[i2].data[i]+' '+options.units)
                                    .appendTo($plot);
                            
                            }
                        
                        });
                        
                        if (steps == datalabels.length){
                            setTimeout( function(){
                                plugin.triggerEvent('complete', $that, options);
                            }, options.speed+delay);
                        }
                        
                        delay += Number(options.delaysteps);
                    });
                    
                    $that.replaceWith($chart);
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-chart, command-lightbox</span></td></tr><tr class="docu"><td class="comment"><h5 id="lightbox">Lightbox</h5>

<p>The <a href="http://jquery-jkit.com/commands/lightbox.html">lightbox command</a></p>
</td><td class="code"><pre class="linenumbers">1921
1922
1923
1924
1925
1926
1927
1928
1929
1930
1931
1932
1933
1934
1935
1936
1937
1938
1939
1940
1941
1942
1943
1944
1945
1946
1947
1948
1949
1950
1951
1952
1953
1954
1955
1956
1957
1958
1959
1960
1961
1962
1963
1964
1965
1966
1967
1968
1969
1970
1971
1972
1973
1974
1975
1976
1977
1978
1979
1980
1981
1982
1983
1984
1985
1986
1987
1988
1989
1990
1991
1992
1993
1994
1995
1996
1997
1998
1999
2000
2001
2002
2003
2004
2005
2006
2007
2008
2009
2010
2011
2012
2013
2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
2024
2025
2026
2027
2028
2029
2030
2031
2032
2033
2034
2035
2036
2037
2038
2039
2040
2041
2042
2043
2044
2045
2046
2047
2048
2049
2050
2051
2052
2053
2054
2055
2056
2057
2058
2059
2060
2061
2062
2063
2064
2065
2066
2067
2068
2069
2070
2071
2072
2073
2074
2075
2076
2077
2078
2079
2080
2081
2082
2083
2084
2085
2086
2087
2088</pre><pre class="prettyprint">                case 'lightbox':
                    
                    var src = '';
                    if ($that.attr('href') !== undefined) src = $that.attr('href');
                    if (src == '' &amp;&amp; $that.attr('src') !== undefined) src = $that.attr('src');
                    if (src == '' &amp;&amp; $that.css('background-image') !== undefined){
                        src = $that.css('background-image').replace('&quot;','').replace('&quot;','').replace('url(','').replace(')','');
                    }
                    
                    if (src != ''){
                    
                        if (options.group != ''){
                            if (lightboxes[options.group] == undefined){
                                lightboxes[options.group] = [];
                            }
                            lightboxes[options.group].push(that);
                        }
                    
                        $that.click(function() {
                            
                            plugin.triggerEvent('clicked', $that, options);
                        
                            if (options.modal == 'no'){
                                var $overlay = $('&lt;div/&gt;', {
                                    id: s.prefix+'-'+type+'-bg',
                                    'class': s.prefix+'-'+type+'-closer '+s.prefix+'-'+type+'-el'
                                }).fadeTo(options.speed, options.opacity).appendTo('body');
                            }
                        
                            var $content = $('&lt;div/&gt;', {
                                id: s.prefix+'-'+type+'-content',
                                'class': s.prefix+'-'+type+'-el'
                            }).fadeTo(0,0.01).appendTo('body');
                        
                            if ($.fn.jKit_iOS()) $content.css('top', $(window).scrollTop()+'px');
                        
                            if (options.width != ''){
                                $content.css({ 'width': options.width });
                                $content.css({ 'left': (($(window).width() - $content.outerWidth()) / 2) + 'px' });
                            }
                            if (options.height != ''){
                                $content.css({ 'height': options.height });
                                $content.css({ 'top': (($(window).height() - $content.outerHeight()) / 2) + 'px' });
                            }
                        
                            var $nav = $('&lt;div/&gt;', {
                                id: s.prefix+'-'+type+'-nav',
                                'class': s.prefix+'-'+type+'-el'
                            }).hide().fadeTo(options.speed, 1).appendTo('body');
                        
                            var $closer = $('&lt;span/&gt;', {
                                'class': s.prefix+'-'+type+'-closer'
                            }).html(options.closer).prependTo($nav);
                        
                            var offset = $content.offset();
                        
                            $nav.css({
                                'top': (offset.top-options.titleHeight-$(window).scrollTop())+'px',
                                'left': (offset.left+$content.outerWidth()-$nav.width())+'px'
                            });
                        
                            if (options.group != ''){
                                var $next = $('&lt;span/&gt;', {
                                    id: s.prefix+'-'+type+'-nav-next'
                                }).prependTo($nav);
                            
                                var $prev = $('&lt;span/&gt;', {
                                    id: s.prefix+'-'+type+'-nav-prev'
                                }).prependTo($nav);
                            
                                plugin.addKeypressEvents($next, 'right');
                                plugin.addKeypressEvents($prev, 'left');
                            
                                if (lightboxes[options.group][lightboxes[options.group].length-1] != that){
                                    $next.html(options.next).on( 'click right', function(){
                                        $.each(lightboxes[options.group], function(i,v){
                                            if (v == that){
                                                $('.'+plugin.settings.prefix+'-'+type+'-el').fadeTo(options.speed, 0, function(){
                                                    $(this).remove();
                                                });
                                                lightboxes[options.group][i+1].click();
                                            }
                                        });
                                    });
                                }
                                if (lightboxes[options.group][0] != that){
                                    $prev.html(options.prev).on( 'click left', function(){
                                        $.each(lightboxes[options.group], function(i,v){
                                            if (v == that){
                                                $('.'+plugin.settings.prefix+'-'+type+'-el').fadeTo(options.speed, 0, function(){
                                                    $(this).remove();
                                                });
                                                lightboxes[options.group][i-1].click();
                                            }
                                        });
                                    });
                                }
                            }
                        
                            $title = $('&lt;div/&gt;', {
                                id: s.prefix+'-'+type+'-title',
                                'class': s.prefix+'-'+type+'-el'
                            }).css({
                                'top': (offset.top-options.titleHeight-$(window).scrollTop())+'px',
                                'left': (offset.left)+'px',
                                'width': $content.width()+'px'
                            }).hide().text($that.attr('title')).fadeTo(options.speed, 1).appendTo('body');
                            
                            if (!$.support.leadingWhitespace){
                                src = src+ &quot;?&quot; + new Date().getTime();
                            }
                            
                            var img = new Image();
                            $(img)
                                .load(function () {
                                
                                    var scalex = ($(this).outerWidth() + options.clearance) / $(window).width();
                                    var scaley = ($(this).outerHeight() + options.clearance) / $(window).height();
                                    var scale = Math.max(scalex,scaley);
                                    if (scale &gt; 1){
                                        var oh = $(this).height();
                                        $(this).width($(this).width() / scale);
                                        $(this).height(oh / scale);
                                    }
                                    
                                    var xmargin = ( $(window).width() - $(this).outerWidth() ) / 2;
                                    var ymargin = ( $(window).height() - $(this).outerHeight() ) / 2;
                                    
                                    $content
                                        .width($(this).width())
                                        .height($(this).height())
                                        .css({ 'left': xmargin+'px', 'top': ymargin+'px' })
                                        .fadeTo(options.speed, 1);
                                    $(this).hide().fadeTo(options.speed, 1);
                                    
                                    if ($that.attr('title') != ''){
                                        $title.css({
                                            'top': (ymargin-options.titleHeight)+'px',
                                            'left': xmargin+'px',
                                            'width': $(this).width()+'px'
                                        });
                                    }
                                
                                    $nav.css({
                                        'top': (ymargin-options.titleHeight)+'px',
                                        'left': (xmargin+$content.outerWidth()-$nav.width())+'px'
                                    });
                            
                                })
                                .attr('src', src)
                                .appendTo($content)
                                .error(function(){
                                    $content.html('&lt;iframe id=&quot;'+s.prefix+'-'+type+'-iframe&quot; src=&quot;'+src+'&quot; style=&quot;border:none;width:100%;height:100%&quot;&gt;&lt;/iframe&gt;').fadeTo(options.speed, 1);
                                });
                        
                            $('.'+s.prefix+'-'+type+'-closer').click(function(){
                                $('.'+s.prefix+'-'+type+'-el').fadeTo(options.speed, 0, function(){
                                    $(this).remove();
                                });
                            });
                        
                            return false;
                    
                        });
                        
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-lightbox, command-scroll</span></td></tr><tr class="docu"><td class="comment"><h5 id="scroll">Scroll</h5>

<p>The <a href="http://jquery-jkit.com/commands/scroll.html">scroll command</a></p>
</td><td class="code"><pre class="linenumbers">2098
2099
2100
2101
2102
2103
2104
2105
2106
2107
2108
2109
2110
2111
2112
2113
2114
2115
2116
2117
2118
2119
2120
2121
2122</pre><pre class="prettyprint">                case 'scroll':
                    
                    $that.click(function() {
                        
                        plugin.triggerEvent('clicked', $that, options);
                        
                        if ($(this).attr(&quot;href&quot;) == ''){
                            var ypos = 0;
                        } else {
                            var ypos = $($that.attr(&quot;href&quot;)).offset().top;
                        }
                        
                        if (options.dynamic == 'yes'){
                            options.speed = Math.abs($(document).scrollTop() - ypos) / 1000 * options.speed;
                        }
                        
                        $('html, body').animate({ scrollTop: ypos+'px' }, options.speed, options.easing, function(){
                            plugin.triggerEvent('complete', $that, options);
                        });
                        
                        return false;
                        
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-scroll, command-hide</span></td></tr><tr class="docu"><td class="comment"><h5 id="hide">Hide</h5>

<p>The <a href="http://jquery-jkit.com/commands/hide.html">hide command</a></p>
</td><td class="code"><pre class="linenumbers">2132
2133
2134
2135
2136
2137
2138</pre><pre class="prettyprint">                case 'hide':
                    
                    $that.jKit_effect(false, options.animation, options.speed, options.easing, options.delay, function(){
                        plugin.triggerEvent('complete', $that, options);
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-hide, command-remove</span></td></tr><tr class="docu"><td class="comment"><h5 id="remove">Remove</h5>

<p>The <a href="http://jquery-jkit.com/commands/remove.html">remove command</a></p>
</td><td class="code"><pre class="linenumbers">2148
2149
2150
2151
2152
2153
2154
2155</pre><pre class="prettyprint">                case 'remove':
                    
                    $that.delay(options.delay).hide(0, function(){
                        $that.remove();
                        plugin.triggerEvent('complete', $that, options);
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-remove, command-show</span></td></tr><tr class="docu"><td class="comment"><h5 id="show">Show</h5>

<p>The <a href="http://jquery-jkit.com/commands/show.html">show command</a></p>
</td><td class="code"><pre class="linenumbers">2165
2166
2167
2168
2169
2170
2171</pre><pre class="prettyprint">                case 'show':
                    
                    $that.hide().jKit_effect(true, options.animation, options.speed, options.easing, options.delay, function(){
                        plugin.triggerEvent('complete', $that, options);
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-show, command-showandhide</span></td></tr><tr class="docu"><td class="comment"><h5 id="showandhide">Showandhide</h5>

<p>The <a href="http://jquery-jkit.com/commands/showandhide.html">showandhide command</a></p>
</td><td class="code"><pre class="linenumbers">2181
2182
2183
2184
2185
2186
2187
2188
2189
2190</pre><pre class="prettyprint">                case 'showandhide':
                    
                    $that.hide().jKit_effect(true, options.animation, options.speed, options.easing, options.delay, function(){
                        plugin.triggerEvent('shown', $that, options);
                        $that.jKit_effect(false, options.animation, options.speed, options.easing, options.duration, function(){
                            plugin.triggerEvent('complete', $that, options);
                        });
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-showandhide, command-loop</span></td></tr><tr class="docu"><td class="comment"><h5 id="loop">Loop</h5>

<p>The <a href="http://jquery-jkit.com/commands/loop.html">loop command</a></p>
</td><td class="code"><pre class="linenumbers">2200
2201
2202
2203
2204</pre><pre class="prettyprint">                case 'loop':
                    
                    plugin.loop($that.hide(), options);
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-loop, command-random</span></td></tr><tr class="docu"><td class="comment"><h5 id="random">Random</h5>

<p>The <a href="http://jquery-jkit.com/commands/random.html">random command</a></p>
</td><td class="code"><pre class="linenumbers">2214
2215
2216
2217
2218
2219
2220
2221
2222
2223
2224
2225
2226
2227
2228
2229
2230
2231
2232
2233
2234
2235
2236
2237
2238
2239
2240</pre><pre class="prettyprint">                case 'random':
                    
                    var childs = $that.children().size();
                    var shownrs = [];
                    
                    while(shownrs.length &lt; options.count){
                        var shownr = Math.floor(Math.random() * childs);
                        if ($.inArray(shownr, shownrs) == -1){
                            shownrs.push(shownr);
                        }
                    }
                    
                    var i = 0;
                    $that.children().each( function(){
                        if ($.inArray(i, shownrs) == -1){
                            if (options.remove == 'yes'){
                                $(this).remove();
                            } else {
                                $(this).hide();
                            }
                        } else {
                            $(this).show();
                        }
                        i++;
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-random, command-partially</span></td></tr><tr class="docu"><td class="comment"><h5 id="partially">Partially</h5>

<p>The <a href="http://jquery-jkit.com/commands/partially.html">partially command</a></p>
</td><td class="code"><pre class="linenumbers">2250
2251
2252
2253
2254
2255
2256
2257
2258
2259
2260
2261
2262
2263
2264
2265
2266
2267
2268
2269
2270
2271
2272
2273
2274
2275
2276
2277
2278
2279
2280
2281
2282</pre><pre class="prettyprint">                case 'partially':
                    
                    var originalHeight = $that.height();
                    
                    if (originalHeight &gt; options.height){
                    
                        $that.css('position', 'relative');
                    
                        var $morediv = $('&lt;div/&gt;').addClass(s.prefix+'-morediv').appendTo(that).html(options.text).css( { width: $that.outerWidth()+'px', opacity: 0.9 });
                    
                        plugin.addKeypressEvents($that, 'down');
                    
                        $that.css({ 'height': options.height+'px', 'overflow': 'hidden' }).on( 'mouseenter down', function() {
                            $morediv.fadeTo(options.speed, 0);
                            $that.animate({ 'height': originalHeight+'px' }, options.speed, options.easing, function(){
                                plugin.triggerEvent('open', $that, options);
                            });
                        }).on( 'mouseleave up',  function(){
                            $morediv.fadeTo(options.speed, 0.9);
                            $that.animate({ 'height': options.height+'px' }, options.speed, options.easing, function(){
                                plugin.triggerEvent('closed', $that, options);
                            });
                        });
                    
                        $morediv.on('click', function(){
                            $that.animate({ 'height': originalHeight+'px' }, options.speed, options.easing, function(){
                                plugin.triggerEvent('closed', $that, options);
                            });
                        });
                        
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-partially, command-slideshow</span></td></tr><tr class="docu"><td class="comment"><h5 id="slideshow">Slideshow</h5>

<p>The <a href="http://jquery-jkit.com/commands/slideshow.html">slideshow command</a></p>
</td><td class="code"><pre class="linenumbers">2292
2293
2294
2295
2296
2297
2298
2299
2300
2301
2302
2303
2304
2305
2306
2307
2308
2309
2310
2311
2312
2313
2314
2315
2316
2317
2318
2319
2320
2321
2322
2323
2324
2325
2326
2327
2328
2329
2330
2331
2332
2333
2334
2335
2336
2337
2338
2339
2340
2341</pre><pre class="prettyprint">                case 'slideshow':
                    
                    var slides = $that.children();
                    
                    if (options.shuffle == 'yes'){
                        var tmp, rand;
                        var slidecount = slides.length;
                        for(var i =0; i &lt; slidecount; i++){
                            rand = Math.floor(Math.random() * slidecount);
                            tmp = slides[i];
                            slides[i] = slides[rand];
                            slides[rand] = tmp;
                        }
                    }
                    
                    $that.css( { 'position': 'relative' } );
                    
                    $that.html(slides[0]);
                    $.data($that, 'animating', false);
                    
                    if (options.on != ''){
                        
                        if (options.on == 'mouseover'){
                            $that.on( 'mouseleave', function(){
                                $.data($that, 'anim', false);
                            });
                        }
                        
                        $that.on( options.on, function(){
                            if (options.on == 'click'){
                                if ($.data($that, 'anim')){
                                    $.data($that, 'anim', false);
                                } else {
                                    $.data($that, 'anim', true);
                                    window.setTimeout( function() { plugin.slideshow(slides, 0, $that, options); }, 0);
                                }
                            } else if (options.on == 'mouseover'){
                                if (!$.data($that, 'anim')){
                                    $.data($that, 'anim', true);
                                    window.setTimeout( function() { plugin.slideshow(slides, 0, $that, options); }, 0);
                                }
                            }
                        });
                    
                    } else {
                        $.data($that, 'anim', true);
                        window.setTimeout( function() { plugin.slideshow(slides, 0, $that, options); }, options.interval);
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-slideshow, command-carousel</span></td></tr><tr class="docu"><td class="comment"><h5 id="carousel">Carousel</h5>

<p>The <a href="http://jquery-jkit.com/commands/carousel.html">carousel command</a></p>
</td><td class="code"><pre class="linenumbers">2351
2352
2353
2354
2355
2356
2357
2358
2359
2360
2361
2362
2363
2364
2365
2366
2367
2368
2369
2370
2371
2372
2373
2374
2375
2376
2377
2378
2379
2380
2381</pre><pre class="prettyprint">                case 'carousel':
                    
                    var cnt = 0;
                    
                    $that.children().each( function(){
                        cnt++;
                        if (cnt &gt; options.limit){
                            $(this).hide();
                        }
                    });
                    
                    var $prevdiv = $('&lt;a/&gt;', {
                        'class': s.prefix+'-'+type+'-prev'
                    }).html(options.prevhtml).on( 'click left', function(){
                        plugin.carousel($that, options, 'prev');
                    }).insertAfter(that);
                    
                    var $nextdiv = $('&lt;a/&gt;', {
                        'class': s.prefix+'-'+type+'-next'
                    }).html(options.nexthtml).on( 'click right', function(){
                        plugin.carousel($that, options, 'next');
                    }).insertAfter(that);
                    
                    plugin.addKeypressEvents($prevdiv, 'left');
                    plugin.addKeypressEvents($nextdiv, 'right');
                    
                    if (options.autoplay == 'yes'){
                        window.setTimeout( function() { plugin.carousel($that, options); }, options.interval);
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-carousel, command-animation</span></td></tr><tr class="docu"><td class="comment"><h5 id="animation">Animation</h5>

<p>The <a href="http://jquery-jkit.com/commands/animation.html">animation command</a></p>
</td><td class="code"><pre class="linenumbers">2391
2392
2393
2394
2395
2396
2397
2398
2399
2400
2401
2402
2403
2404
2405
2406
2407
2408
2409
2410
2411
2412
2413
2414
2415
2416
2417
2418
2419
2420
2421
2422
2423
2424
2425
2426
2427
2428
2429
2430
2431
2432
2433
2434
2435
2436
2437
2438
2439
2440
2441
2442
2443
2444
2445
2446
2447
2448
2449
2450
2451
2452
2453
2454
2455
2456
2457
2458
2459
2460
2461
2462</pre><pre class="prettyprint">                case 'animation':
                    
                    if (options.to != ''){
                        
                        if (options.from != ''){
                            $that.css( plugin.cssFromString(options.from) );
                        }
                        
                        setTimeout(function() {
                            if (options.on != ''){
                                $that.on( options.on, function(){
                                    $that.animate( plugin.cssFromString(options.to), options.speed, options.easing, function(){
                                        if (options.macro != undefined) plugin.applyMacro($that, options.macro);
                                        plugin.triggerEvent('complete', $that, options);
                                    });
                                });
                            } else {
                                $that.animate( plugin.cssFromString(options.to), options.speed, options.easing, function(){
                                    if (options.macro != undefined) plugin.applyMacro($el, options.macro);
                                    plugin.triggerEvent('complete', $that, options);
                                });
                            }
                        }, options.delay);
                    
                    } else {
                        
                        options.interval = 1000 / options.fps;
                        
                        var frames = [];
                        
                        var pos = 0;
                        var lastframe = 0;
                        
                        $that.children().each( function(){
                            var rel = $(this).attr('rel');
                            var data = $(this).attr(s.dataAttribute);
                            
                            if (data != undefined){
                                var start = data.indexOf('[');
                                var end = data.indexOf(']');
                                var optionstring = data.substring(start+1, end);
                            } else {
                                var start = rel.indexOf('[');
                                var end = rel.indexOf(']');
                                var optionstring = rel.substring(start+1, end);
                            }
                            
                            var frame = plugin.parseOptions(optionstring);
                            
                            frame.el = $(this);
                            if (frame.easing == undefined) frame.easing = 'linear';
                            
                            frame.start = pos;
                            pos += parseInt(frame.steps);
                            frame.end = pos;
                            lastframe = pos;
                            pos++;
                            
                            frames.push(frame);
                        });
                        
                        options.lastframe = lastframe;
                        
                        $that.css('overflow', 'hidden');
                        
                        $that.html(frames[0].el);
                        
                        window.setTimeout( function() { plugin.animation(frames, -1, $that, options); }, 0);
                    
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-animation, command-gallery</span></td></tr><tr class="docu"><td class="comment"><h5 id="gallery">Gallery</h5>

<p>The <a href="http://jquery-jkit.com/commands/gallery.html">gallery command</a></p>
</td><td class="code"><pre class="linenumbers">2472
2473
2474
2475
2476
2477
2478
2479
2480
2481
2482
2483
2484
2485
2486
2487
2488
2489
2490
2491
2492
2493
2494
2495
2496
2497
2498
2499
2500
2501
2502
2503
2504
2505
2506
2507
2508
2509
2510
2511
2512
2513
2514
2515
2516
2517
2518
2519
2520
2521
2522
2523
2524
2525
2526
2527
2528
2529
2530</pre><pre class="prettyprint">                case 'gallery':
                    
                    var images = $that.children();
                    
                    $that.html($that.children(':nth-child('+options.active+')').clone());
                    
                    if (options.lightbox == 'yes'){
                        plugin.executeCommand($that.find('img'), 'lightbox', {});
                    }
                    
                    var $thumbdiv = $('&lt;div/&gt;', {
                        id: s.prefix+'-'+$that.attr('id')+'-'+type+'-thumbs'
                    }).addClass(s.prefix+'-'+type+'-thumbs').insertAfter(that);
                    
                    if (options.showcaptions == 'yes'){
                        var $captiondiv = $('&lt;div/&gt;', {
                            id: s.prefix+'-'+$that.attr('id')+'-'+type+'-captions'
                        }).addClass(s.prefix+'-'+type+'-captions').text($(images[options.active-1]).attr('title')).insertAfter(that);
                    }
                    
                    $.each( images, function(index, value){
                        
                        if (options.event != 'click' &amp;&amp; options.lightbox == 'yes'){
                            plugin.executeCommand($(value), 'lightbox', { 'group': s.prefix+'-'+$that.attr('id')+'-'+type });
                        }
                        
                        if (options.active-1 == index){
                            $(value).addClass(s.activeClass);
                        }
                        
                        $(value)
                            .on( options.event, function() {
                                
                                plugin.triggerEvent('hideentry', $that, options);
                                
                                $that.jKit_effect(false, options.animation, options.speed, options.easing, 0, function(){
                                    $that.find('img').attr('src', $(value).attr('src'));
                                    
                                    if (options.lightbox == 'yes'){
                                        plugin.executeCommand($that.find('img').unbind('click'), 'lightbox', {});
                                    }
                                    
                                    plugin.triggerEvent('showentry showentry'+(index+1), $that, options);
                                    
                                    $that.jKit_effect(true, options.animation, options.speed, options.easing, 0);
                                    $thumbdiv.find('img').removeClass(s.activeClass);
                                    $(value).addClass(s.activeClass);
                                    
                                    if (options.showcaptions == 'yes'){
                                        $captiondiv.text($(value).attr('title'));
                                    }
                                });
                                    
                            })
                            .css({ 'cursor': 'pointer' })
                            .appendTo($thumbdiv);
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-gallery, command-tabs</span></td></tr><tr class="docu"><td class="comment"><h5 id="tabs">Tabs</h5>

<p>The <a href="http://jquery-jkit.com/commands/tabs.html">tabs command</a></p>
</td><td class="code"><pre class="linenumbers">2540
2541
2542
2543
2544
2545
2546
2547
2548
2549
2550
2551
2552
2553
2554
2555
2556
2557
2558
2559
2560
2561
2562
2563
2564
2565
2566
2567
2568
2569
2570
2571
2572
2573
2574
2575
2576
2577
2578
2579
2580
2581
2582
2583
2584
2585
2586
2587</pre><pre class="prettyprint">                case 'tabs':
                
                    var containerTag = plugin.findElementTag($that, '&gt;', 'max', 'div');
                    var titleTag = plugin.findElementTag($that, '&gt; '+containerTag+' &gt;', 0, 'h3');
                    var contentTag = plugin.findElementTag($that, '&gt; '+containerTag+' &gt;', 1, 'div');
                    
                    var tabs = [];
                    $that.children(containerTag).each( function(){
                        tabs.push({ 'title': $(this).children(titleTag).html(), 'content': $(this).children(contentTag).detach() });
                    });
                    
                    $that.html('');
                    var $tabnav = $('&lt;ul/&gt;', { }).appendTo(that);
                    
                    var $tabcontent = $;
                    
                    $.each( tabs, function(index, value){
                        
                        var $litemp = $('&lt;li/&gt;', { }).html(value.title).css('cursor', 'pointer').appendTo($tabnav);
                        
                        if (options.active-1 == index){
                            $litemp.addClass(s.activeClass);
                        }
                        
                        var callback = function(){
                            plugin.triggerEvent('showentry showentry'+(index+1), $that, options);
                            
                            $tabcontent.jKit_effect(false, options.animation, options.speed, options.easing, 0, function(){
                                $(this).remove();
                                $tabcontent = tabs[index].content.appendTo($that).hide();
                                $tabcontent.jKit_effect(true, options.animation, options.speed, options.easing);
                            });
                            
                            $tabnav.find('li').removeClass(s.activeClass);
                            $tabnav.find('li:nth-child('+(index+1)+')').addClass(s.activeClass);
                        };
                        
                        $litemp.on( 'click ', function(){
                            callback();
                        });
                        
                    });
                    
                    if (tabs[options.active-1] != undefined){
                        $tabcontent = tabs[options.active-1].content.appendTo($that);
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-tabs, command-accordion</span></td></tr><tr class="docu"><td class="comment"><h5 id="accordion">Accordion</h5>

<p>The <a href="http://jquery-jkit.com/commands/accordion.html">accordion command</a></p>
</td><td class="code"><pre class="linenumbers">2597
2598
2599
2600
2601
2602
2603
2604
2605
2606
2607
2608
2609
2610
2611
2612
2613
2614
2615
2616
2617
2618
2619
2620
2621
2622
2623
2624
2625
2626
2627
2628
2629
2630
2631
2632
2633
2634
2635
2636
2637
2638
2639
2640
2641
2642
2643
2644
2645
2646
2647
2648
2649
2650
2651</pre><pre class="prettyprint">                case 'accordion':
                
                    var containerTag = plugin.findElementTag($that, '&gt;', 'max', 'div');
                    var titleTag = plugin.findElementTag($that, '&gt; '+containerTag+' &gt;', 0, 'h3');
                    var contentTag = plugin.findElementTag($that, '&gt; '+containerTag+' &gt;', 1, 'div');
                    
                    var tabs = [];
                    $that.children(containerTag).each( function(){
                        tabs.push({
                            'title': $(this).children(titleTag).detach(),
                            'content': $(this).children(contentTag).detach()
                        });
                    });
                    
                    $that.html('');
                    var $tabnav = $('&lt;ul/&gt;', { }).appendTo(that);
                    
                    var $tabcontent = $;
                    var current = 1;
                    if (options.active == 0) current = -1;
                    
                    $.each( tabs, function(index, value){
                        
                        var $litemp = $('&lt;li/&gt;', { }).append(value.title).css('cursor', 'pointer').appendTo($tabnav);
                        
                        if (options.active-1 == index){
                            $litemp.append(value.content).children(titleTag).addClass(s.activeClass);
                            current = index;
                        } else {
                            $litemp.append(value.content.hide());
                        }
                        
                        $litemp.find('&gt; '+titleTag).on( 'click', function(e){
                            if (index != current){
                                plugin.triggerEvent('showentry showentry'+(index+1), $that, options);
                                $tabnav.find('&gt; li &gt; '+titleTag).removeClass(s.activeClass);
                                $(this).addClass(s.activeClass);
                                if (options.animation == 'slide'){
                                    $tabnav.find('&gt; li:nth-child('+(current+1)+') &gt; '+contentTag).slideUp(options.speed, options.easing);
                                    $tabnav.find('&gt; li:nth-child('+(index+1)+') &gt; '+contentTag).slideDown(options.speed, options.easing);
                                } else {
                                    $tabnav.find('&gt; li:nth-child('+(current+1)+') &gt; '+contentTag).hide();
                                    $tabnav.find('&gt; li:nth-child('+(index+1)+') &gt; '+contentTag).show();
                                }
                                current = index;
                            } else {
                                plugin.triggerEvent('hideentry hideentry'+(index+1), $that, options);
                                $(this).removeClass(s.activeClass).next().slideUp(options.speed, options.easing);
                                current = -1;
                            }
                        });
                    
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-accordion, command-parallax</span></td></tr><tr class="docu"><td class="comment"><h5 id="parallax">Parallax</h5>

<p>The <a href="http://jquery-jkit.com/commands/parallax.html">parallax command</a></p>
</td><td class="code"><pre class="linenumbers">2661
2662
2663
2664
2665
2666
2667
2668
2669
2670
2671
2672
2673
2674
2675
2676
2677
2678
2679
2680
2681
2682
2683
2684
2685
2686
2687
2688
2689
2690
2691
2692
2693
2694
2695
2696
2697
2698
2699
2700
2701
2702
2703
2704
2705
2706</pre><pre class="prettyprint">                case 'parallax':
                    
                    var strength = options.strength / 10;
                    
                    if (options.detect == 'scroll'){
                        var $capture = $(window);
                    } else if (options.scope == 'global'){
                        var $capture = $(document);
                    } else {
                        var $capture = $that;
                    }
                    
                    $capture.on( options.detect, function(event) {
                        
                        if ((windowhasfocus || !windowhasfocus &amp;&amp; s.ignoreFocus) &amp;&amp; ($that.jKit_inViewport() || !$that.jKit_inViewport() &amp;&amp; s.ignoreViewport)){
                            var cnt = 1;
                            
                            if (options.detect == 'scroll'){
                                var xaxis = $(window).scrollLeft() + $(window).width() / 2;
                                var yaxis = $(window).scrollTop() + $(window).height() / 2;
                            } else {
                                var xaxis = event.pageX;
                                var yaxis = event.pageY;
                            }
                            
                            $that.children().each( function(){
                                
                                var box = $that.offset();
                                
                                if (options.axis == 'x' || options.axis == 'both'){
                                    var offsetx = (xaxis-box.left-($that.width()/2))*strength*cnt*-1 - $(this).width()/2 + $that.width()/2;
                                    $(this).css({ 'left': offsetx+'px' });
                                }
                                if (options.axis == 'y' || options.axis == 'both'){
                                    var offsety = (yaxis-box.top-($that.height()/2))*strength*cnt*-1 - $(this).height()/2 + $that.height()/2;
                                    $(this).css({ 'top': offsety+'px' });
                                }
                                
                                cnt++;
                            
                            });
                        }
                    
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-parallax, command-menu</span></td></tr><tr class="docu"><td class="comment"><h5 id="menu">Menu</h5>

<p>The <a href="http://jquery-jkit.com/commands/menu.html">menu command</a></p>
</td><td class="code"><pre class="linenumbers">2716
2717
2718
2719
2720
2721
2722
2723
2724
2725
2726
2727
2728
2729
2730
2731
2732
2733
2734
2735
2736
2737
2738
2739
2740
2741
2742
2743
2744
2745</pre><pre class="prettyprint">                case 'menu':
                    
                    if (options.autoactive == 'yes'){
                        
                        var path = window.location.toString().split('#')[0].split(&quot;/&quot;);
                        
                        $that.find(&quot;a&quot;).filter(function() {
                            return $(this).attr(&quot;href&quot;) == path[path.length-1];
                        }).addClass(s.activeClass);
                        
                    }
                    
                    $that.find(&quot;li&quot;).hover(function(){
                        
                        $(this).addClass(&quot;hover&quot;);
                        $('ul:first',this).css('visibility', 'visible');
                    
                    }, function(){
                        
                        $(this).removeClass(&quot;hover&quot;);
                        $('ul:first',this).css('visibility', 'hidden');
                    
                    }).on( 'click', function(){
                        
                        $(this).addClass(&quot;hover&quot;);
                        $('ul:first',this).css('visibility', 'visible');
                    
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-menu, command-form</span></td></tr><tr class="docu"><td class="comment"><h5 id="form">Form</h5>

<p>The <a href="http://jquery-jkit.com/commands/form.html">form command</a></p>
</td><td class="code"><pre class="linenumbers">2755
2756
2757
2758
2759
2760
2761
2762
2763
2764
2765
2766
2767
2768
2769
2770
2771
2772
2773
2774
2775
2776
2777
2778
2779
2780
2781
2782
2783
2784
2785
2786
2787
2788
2789
2790</pre><pre class="prettyprint">                case 'form':
                    
                    $that.append('&lt;input type=&quot;hidden&quot; name=&quot;'+s.prefix+'-requireds&quot; id=&quot;'+s.prefix+'-requireds&quot;&gt;');
                    
                    if (options.error != undefined) options.formerror = options.error;
                    
                    var requireds = [];
                    
                    $that.on('submit', function() {
                        
                        var errors = [];
                        
                        $(this).find('span.'+s.errorClass).remove();
                        
                        $(this).find(&quot;*[rel^=jKit], *[&quot;+s.dataAttribute+&quot;]&quot;).each( function(){
                            
                            var rel = $(this).attr('rel');
                            var data = $(this).attr(s.dataAttribute);
                            
                            if (data != undefined){
                                var start = data.indexOf('[');
                                var end = data.indexOf(']');
                                var optionstring = data.substring(start+1, end);
                            } else {
                                var start = rel.indexOf('[');
                                var end = rel.indexOf(']');
                                var optionstring = rel.substring(start+1, end);
                            }
                            
                            var options = plugin.parseOptions(optionstring);
                            
                            var type = options.type;
                            var elerror = false;
                            var required = false;
                            
                            if (options.required == undefined) options.required = false;</pre></td></tr><tr class="docu"><td class="comment"><p>required?</p>
</td><td class="code"><pre class="linenumbers">2793
2794
2795
2796
2797
2798
2799
2800
2801
2802
2803
2804</pre><pre class="prettyprint">                            if (options.required == 'true'){
                                if ($(this).val() == ''){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'required' } );
                                }
                                required = true;
                                if ($.inArray($(this).attr('name'), requireds) == -1){
                                    requireds.push($(this).attr('name'));
                                }
                            }
                            
                            if ((required || $(this).val() != '') || options.type == 'group'){</pre></td></tr><tr class="docu"><td class="comment"><p>email?</p>
</td><td class="code"><pre class="linenumbers">2807
2808
2809
2810</pre><pre class="prettyprint">                                if (options.type == 'email' &amp;&amp; !$.fn.jKit_emailCheck($(this).val())){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'email' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>url (http:// or https://)?</p>
</td><td class="code"><pre class="linenumbers">2813
2814
2815
2816</pre><pre class="prettyprint">                                if (options.type == 'url' &amp;&amp; !$.fn.jKit_urlCheck($(this).val())){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'url' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>date?</p>
</td><td class="code"><pre class="linenumbers">2819
2820
2821
2822</pre><pre class="prettyprint">                                if (options.type == 'date' &amp;&amp; !$.fn.jKit_dateCheck($(this).val())){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'date' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>older?</p>
</td><td class="code"><pre class="linenumbers">2825
2826
2827
2828</pre><pre class="prettyprint">                                if (options.type == 'date' &amp;&amp;  (new Date($(this).val()).getTime() &lt;= new Date($(options.older).val()).getTime()) ){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'older' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>younger?</p>
</td><td class="code"><pre class="linenumbers">2831
2832
2833
2834</pre><pre class="prettyprint">                                if (options.type == 'date' &amp;&amp;  (new Date($(this).val()).getTime() &gt;= new Date($(options.younger).val()).getTime()) ){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'younger' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>time?</p>
</td><td class="code"><pre class="linenumbers">2837
2838
2839
2840</pre><pre class="prettyprint">                                if (options.type == 'time' &amp;&amp; !$.fn.jKit_timeCheck($(this).val())){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'time' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>phone number?</p>
</td><td class="code"><pre class="linenumbers">2843
2844
2845
2846</pre><pre class="prettyprint">                                if (options.type == 'phone' &amp;&amp; !$.fn.jKit_phoneCheck($(this).val())){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'phone' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>float?</p>
</td><td class="code"><pre class="linenumbers">2849
2850
2851
2852</pre><pre class="prettyprint">                                if (options.type == 'float' &amp;&amp; isNaN($(this).val())){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'float' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>int?</p>
</td><td class="code"><pre class="linenumbers">2855
2856
2857
2858</pre><pre class="prettyprint">                                if (options.type == 'int' &amp;&amp; parseInt($(this).val()) != $(this).val()){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'int' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>min (numeric)?</p>
</td><td class="code"><pre class="linenumbers">2861
2862
2863
2864</pre><pre class="prettyprint">                                if ((options.type == 'int' || options.type == 'float') &amp;&amp; options.min != undefined &amp;&amp; $(this).val() &lt; options.min &amp;&amp; options.type != 'group'){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'min' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>max (numeric)?</p>
</td><td class="code"><pre class="linenumbers">2867
2868
2869
2870</pre><pre class="prettyprint">                                if ((options.type == 'int' || options.type == 'float') &amp;&amp; options.max != undefined &amp;&amp; $(this).val() &gt; options.max &amp;&amp; options.type != 'group'){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'max' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>bigger than (numeric)?</p>
</td><td class="code"><pre class="linenumbers">2873
2874
2875
2876</pre><pre class="prettyprint">                                if ((options.type == 'int' || options.type == 'float') &amp;&amp; options.bigger != undefined &amp;&amp; $(this).val() &gt; $(options.bigger).val()){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'bigger' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>smaller than (numeric)?</p>
</td><td class="code"><pre class="linenumbers">2879
2880
2881
2882</pre><pre class="prettyprint">                                if ((options.type == 'int' || options.type == 'float') &amp;&amp; options.smaller != undefined &amp;&amp; $(this).val() &lt; $(options.smaller).val()){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'smaller' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>min (length)?</p>
</td><td class="code"><pre class="linenumbers">2885
2886
2887
2888</pre><pre class="prettyprint">                                if ((options.type != 'int' &amp;&amp; options.type != 'float') &amp;&amp; options.min != undefined &amp;&amp; $(this).val().length &lt; options.min &amp;&amp; options.type != 'group'){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'minlength' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>max (length)?</p>
</td><td class="code"><pre class="linenumbers">2891
2892
2893
2894</pre><pre class="prettyprint">                                if ((options.type != 'int' &amp;&amp; options.type != 'float') &amp;&amp; options.max != undefined &amp;&amp; $(this).val().length &gt; options.max &amp;&amp; options.type != 'group'){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'maxlength' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>length (string)?</p>
</td><td class="code"><pre class="linenumbers">2897
2898
2899
2900</pre><pre class="prettyprint">                                if (options.length != undefined &amp;&amp; $(this).val().length != options.length){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'length' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>longer than (length)?</p>
</td><td class="code"><pre class="linenumbers">2903
2904
2905
2906</pre><pre class="prettyprint">                                if ((options.type != 'int' &amp;&amp; options.type != 'float') &amp;&amp; options.longer != undefined &amp;&amp; $(this).val().length &gt; $(options.longer).val().length){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'longer' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>shorter than (length)?</p>
</td><td class="code"><pre class="linenumbers">2909
2910
2911
2912</pre><pre class="prettyprint">                                if ((options.type != 'int' &amp;&amp; options.type != 'float') &amp;&amp; options.shorter != undefined &amp;&amp; $(this).val().length &lt; $(options.shorter).val().length){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'shorter' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>strength (password, 0=bad, 100=perfect)?</p>
</td><td class="code"><pre class="linenumbers">2915
2916
2917
2918</pre><pre class="prettyprint">                                if (options.strength != undefined &amp;&amp; $.fn.jKit_passwordStrength($(this).val()) &lt; options.strength){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'strength' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>same (as other field)?</p>
</td><td class="code"><pre class="linenumbers">2921
2922
2923
2924</pre><pre class="prettyprint">                                if (options.same != undefined &amp;&amp; $(this).val() != $(options.same).val()){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'same' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>different (as other field)?</p>
</td><td class="code"><pre class="linenumbers">2927
2928
2929
2930</pre><pre class="prettyprint">                                if (options.different != undefined &amp;&amp; $(this).val() != $(options.different).val()){
                                    elerror = true;
                                    errors.push( { 'element': $(this), 'error': 'different' } );
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>extension (file)?</p>
</td><td class="code"><pre class="linenumbers">2933
2934
2935
2936
2937
2938
2939
2940
2941</pre><pre class="prettyprint">                                if (options.type == 'extension'){
                                    var opts = options.options.split(s.delimiter);
                                    var filesplit = $(this).val().split('.');
                                    var ext = filesplit[filesplit.length-1];
                                    if ($.inArray(ext,opts) == -1) {
                                        elerror = true;
                                        errors.push( { 'element': $(this), 'error': 'ext' } );
                                    }
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>group (is one checked)?</p>
</td><td class="code"><pre class="linenumbers">2944
2945
2946
2947
2948
2949
2950
2951
2952
2953
2954
2955
2956
2957
2958
2959
2960</pre><pre class="prettyprint">                                if (options.type == 'group'){
                                    if (options.min != undefined || options.max != undefined){
                                        var checked = 0;
                                        $(this).children('input[type=checkbox][checked]').each( function(){
                                            checked++;
                                        });
                                        if ((options.min != undefined &amp;&amp; options.min &gt; checked) || (options.max != undefined &amp;&amp; checked &gt; options.max)){
                                            elerror = true;
                                            errors.push( { 'element': $(this), 'error': 'group' } );
                                        }
                                    } else {
                                        if ($(this).find(&quot;input[name='&quot;+options.name+&quot;']:checked&quot;).val() == undefined){
                                            elerror = true;
                                            errors.push( { 'element': $(this), 'error': 'group' } );
                                        }
                                    }
                                }</pre></td></tr><tr class="docu"><td class="comment"><p>custom (function call)?</p>
</td><td class="code"><pre class="linenumbers">2963
2964
2965
2966
2967
2968
2969
2970
2971
2972
2973
2974
2975
2976
2977
2978
2979
2980
2981
2982
2983
2984
2985
2986
2987
2988
2989
2990
2991
2992
2993
2994
2995
2996
2997
2998
2999
3000
3001
3002
3003
3004
3005
3006
3007
3008
3009
3010
3011
3012
3013
3014
3015
3016
3017
3018
3019
3020
3021
3022
3023
3024
3025
3026
3027
3028
3029
3030
3031
3032
3033
3034
3035
3036
3037
3038
3039
3040</pre><pre class="prettyprint">                                if (options.type == 'custom' &amp;&amp; options.checkfunction != undefined){
                                    var fn = window[options.checkfunction];
                                    if(typeof fn === 'function') {
                                        if ( !fn( $(this).val() ) ){
                                            elerror = true;
                                            errors.push( { 'element': $(this), 'error': 'custom' } );
                                        }
                                    }
                                }
                            
                            }
                            
                            if (elerror){
                                if (options.error != undefined){
                                    $(this).after('&lt;span class=&quot;'+s.errorClass+'&quot;&gt;'+options.error+'&lt;/span&gt;');
                                }
                                $(this).addClass(s.errorClass);
                            } else {
                                $(this).removeClass(s.errorClass);
                            }
                        
                        });
                        
                        if (errors.length == 0){
                            
                            if (options.validateonly == &quot;yes&quot;){
                                
                                plugin.triggerEvent('complete', $that, options);
                                
                                return true;
                            
                            } else {
                                var action = $(this).attr('action');
                                
                                $that.removeClass(s.errorClass);
                                
                                if (options.success == undefined) options.success = 'Your form has been sent.';
                                
                                $that.find('input#'+s.prefix+'-requireds').val(requireds.join(s.delimiter));
                                
                                $.post(action, $that.serialize(), function(data, textStatus, jqXHR) {
                                    $that.find('.'+s.errorClass).hide();
                                    if (data.sent != undefined &amp;&amp; data.sent == true){
                                        if (options.success.charAt(0) == '#'){
                                            $that.html($(options.success).show());
                                        } else {
                                            $that.html('&lt;p class=&quot;'+s.successClass+'&quot;&gt;'+options.success+'&lt;/p&gt;');
                                        }
                                        plugin.triggerEvent('complete', $that, options);
                                        if (options.macro != undefined) plugin.applyMacro($that, options.macro);
                                    } else {
                                        for (x in data.error){
                                            var field = data.error[x];
                                            $that.find('*[name='+field+']').addClass(s.errorClass).after('&lt;span class=&quot;'+s.errorClass+'&quot;&gt;'+options.error+'&lt;/span&gt;');
                                        }
                                        plugin.triggerEvent('error', $that, options);
                                    }
                                }).error(function(xhr, ajaxOptions, thrownError){
                                    alert(thrownError);
                                    $that.append('&lt;span class=&quot;'+s.errorClass+'&quot;&gt;There was an error submitting the form: Error Code '+xhr.status+'&lt;/span&gt;');
                                });
                                
                                return false;
                            
                            }
                        
                        } else {
                            $that.addClass(s.errorClass);
                            if (options.formerror != undefined){
                                $that.append('&lt;span class=&quot;'+s.errorClass+'&quot;&gt;'+options.formerror+'&lt;/span&gt;');
                            }
                            plugin.triggerEvent('error', $that, options);
                            return false;
                        }
                    
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-form, command-plugin</span></td></tr><tr class="docu"><td class="comment"><h5 id="plugin">Plugin</h5>

<p>The <a href="http://jquery-jkit.com/commands/plugin.html">plugin command</a></p>
</td><td class="code"><pre class="linenumbers">3050
3051
3052
3053
3054
3055
3056
3057
3058
3059
3060
3061
3062
3063
3064
3065
3066
3067
3068
3069
3070
3071
3072
3073
3074
3075
3076
3077
3078
3079
3080</pre><pre class="prettyprint">                case 'plugin':
                    
                    if (s.plugins[options.script] != undefined){
                        
                        options.functioncall = s.plugins[options.script]['fn'];
                        if (s.plugins[options.script]['option'] != undefined){
                            options.option = s.plugins[options.script]['option'];
                        }
                        
                        options.script = s.plugins[options.script]['path'];
                    }
                    
                    $.ajaxSetup({ cache: true });
                    if (options.script != undefined){
                        $.getScript(options.script, function() {
                            
                            if (options.option != undefined){
                                $that[ options.functioncall ]( options[options.option] );
                            } else {
                                delete(options.type);
                                delete(options.script);
                                $that[ options.functioncall ]( options );
                            }
                            
                            plugin.triggerEvent('complete', $that, options);
                        
                        });
                    }
                    $.ajaxSetup({ cache: false });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-plugin, command-tooltip</span></td></tr><tr class="docu"><td class="comment"><h5 id="tooltip">Tooltip</h5>

<p>The <a href="http://jquery-jkit.com/commands/tooltip.html">tooltip command</a></p>
</td><td class="code"><pre class="linenumbers">3090
3091
3092
3093
3094
3095
3096
3097
3098
3099
3100
3101
3102
3103
3104
3105
3106
3107
3108
3109
3110
3111
3112
3113
3114
3115
3116
3117
3118
3119
3120
3121
3122
3123
3124
3125
3126
3127
3128
3129
3130
3131</pre><pre class="prettyprint">                case 'tooltip':
                    
                    if ($('div#'+s.prefix+'-tooltip').length == 0){
                        $('&lt;div/&gt;', {
                            id: s.prefix+'-'+type
                        }).hide().appendTo('body');
                    }
                    
                    $tip = $('div#'+s.prefix+'-'+type);
                    
                    $that.on('mouseenter', function(e){
                        
                        if (options.classname != ''){
                            $tip.html(options.text).removeClass().css({ 'background': '', 'color': '' }).addClass(options.classname);
                        } else {
                            $tip.html(options.text).removeClass().css({ 'background': options.background, 'color': options.color });
                        }
                        
                        $tip.css('top', (e.pageY+15-$(window).scrollTop())).css('left', e.pageX);
                        
                        if ( parseInt($tip.css('left')) &gt; $(window).width() / 2 ){
                            $tip.css('left', '0px').css('left', e.pageX - $tip.width());
                        }
                        
                        $tip.stop(true, true).fadeIn(200);
                        
                        plugin.triggerEvent('open', $that, options);
                    
                    }).on('mouseleave click', function(e){
                        
                        var speed = 200;
                        if ($tip.is(':animated')){
                            speed = 0;
                        }
                        
                        $tip.stop(true, true).fadeOut(speed);
                        
                        plugin.triggerEvent('closed', $that, options);
                    
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-tooltip, command-background</span></td></tr><tr class="docu"><td class="comment"><h5 id="background">Background</h5>

<p>The <a href="http://jquery-jkit.com/commands/background.html">background command</a></p>
</td><td class="code"><pre class="linenumbers">3141
3142
3143
3144
3145
3146
3147
3148
3149
3150
3151
3152
3153
3154
3155
3156
3157
3158
3159
3160
3161
3162
3163
3164
3165
3166
3167</pre><pre class="prettyprint">                case 'background':
                    
                    var $bg = $('&lt;div/&gt;', {
                        id: s.prefix+'-'+type
                    }).css({
                        'position': 'fixed',
                        'right': '0px',
                        'top': '0px',
                        'overflow': 'hidden',
                        'z-index': '-1',
                        'width': $(window).width(),
                        'height': $(window).height()
                    }).appendTo('body');
                    
                    $bg.append($that);
                    
                    var ow = $that.attr('width');
                    var oh = $that.attr('height');
                    
                    plugin.scaleFit($bg, $that, ow, oh, options.distort);
                    
                    $(window).resize(function() {
                        plugin.scaleFit($bg, $that, ow, oh, options.distort);
                        plugin.triggerEvent('resized', $that, options);
                    });
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-background, command-lorem</span></td></tr><tr class="docu"><td class="comment"><h5 id="lorem">Lorem</h5>

<p>The <a href="http://jquery-jkit.com/commands/lorem.html">lorem command</a></p>
</td><td class="code"><pre class="linenumbers">3177
3178
3179
3180
3181
3182
3183
3184
3185
3186
3187
3188
3189
3190
3191
3192
3193
3194
3195
3196
3197
3198
3199
3200
3201
3202
3203
3204
3205
3206
3207
3208
3209
3210
3211
3212
3213
3214
3215
3216
3217</pre><pre class="prettyprint">                case 'lorem':
                    
                    var lorem = [
                        'Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
                        'Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.',
                        'Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.',
                        'Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.',
                        'Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.',
                        'At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.',
                        'Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.'
                    ];
                    
                    var text = '';
                    
                    if (options.random == &quot;yes&quot;){
                        lorem = $.fn.jKit_arrayShuffle(lorem);
                    }
                    
                    if (options.paragraphs &gt; 0){
                        for ( var i=1; i&lt;=options.paragraphs; i++ ) {
                            text += '&lt;p&gt;'+lorem[(i-1)%7]+'&lt;/p&gt;';
                        }
                    } else {
                        if (options.length != undefined &amp;&amp; options.length != ''){
                            
                            var i=1;
                            
                            while(text.length &lt; options.length-1){
                                text += lorem[(i-1)%7]+' ';
                                text = text.substring(0, options.length-1);
                                i++;
                            }
                        
                        } else {
                            text = lorem[0];
                        }
                    }
                    
                    $that.html(text);
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-lorem, command-binding</span></td></tr><tr class="docu"><td class="comment"><h5 id="binding">Binding</h5>

<p>The <a href="http://jquery-jkit.com/commands/binding.html">binding command</a></p>
</td><td class="code"><pre class="linenumbers">3227
3228
3229
3230
3231</pre><pre class="prettyprint">                case 'binding':
                    
                    window.setTimeout( function() { plugin.binding($that, options); }, 0);
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-binding, command-limit</span></td></tr><tr class="docu"><td class="comment"><h5 id="limit">Limit</h5>

<p>The <a href="http://jquery-jkit.com/commands/limit.html">limit command</a></p>
</td><td class="code"><pre class="linenumbers">3241
3242
3243
3244
3245
3246
3247
3248
3249
3250
3251
3252
3253
3254
3255
3256
3257
3258</pre><pre class="prettyprint">                case 'limit':
                    
                    if (options.elements == 'children'){
                        $that.children(':gt('+(options.count-1)+')').each(function(){
                            $(this).jKit_effect(false, options.animation, options.speed, options.easing);
                        });
                        setTimeout( function(){
                            plugin.triggerEvent('complete', $that, options);
                        }, options.speed);
                    } else {
                        var newtext = $that.text().substr(0,options.count);
                        if (newtext != $that.text()){
                            newtext = newtext.substr(0,newtext.length-options.endstring.length)+options.endstring;
                            $that.text(newtext);
                        }
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-limit, command-template</span></td></tr><tr class="docu"><td class="comment"><h5 id="template">Template</h5>

<p>The <a href="http://jquery-jkit.com/commands/template.html">template command</a></p>
</td><td class="code"><pre class="linenumbers">3268
3269
3270
3271
3272
3273
3274
3275
3276
3277
3278
3279
3280
3281
3282
3283
3284
3285
3286
3287
3288
3289
3290
3291
3292
3293
3294
3295
3296
3297
3298
3299
3300
3301
3302
3303
3304
3305
3306
3307
3308
3309
3310
3311
3312
3313
3314
3315
3316
3317
3318
3319
3320
3321</pre><pre class="prettyprint">                case 'template':
                    
                    if (options.action == 'apply'){
                        
                        $el = $that;
                        
                        if (options.children != undefined &amp;&amp; options.children != ''){
                            
                            $el = $that.children(options.children);
                            
                            var cnt = 0;
                            $el.each( function(){
                                cnt++;
                                plugin.applyTemplate($(this), options, cnt, $el.length);
                            });
                        } else {
                            plugin.applyTemplate($that, options);
                        }
                        
                        if (options.dynamic == 'yes'){
                            var $addDiv = $('&lt;a/&gt;', {
                                'class': s.prefix+'-'+type+'-add'
                            }).html(options.addhtml).on( 'click', function(){
                                
                                $el = $($that.get(0));
                                
                                var cnt = $el.children(options.children).length + 1;
                                
                                $el.find('.if-entry-last').hide();
                                plugin.applyTemplate($('&lt;'+options.children+'/&gt;').appendTo($el), options, cnt, cnt);
                                
                                plugin.triggerEvent('added', $that, options);
                            
                            }).insertAfter($that);
                        
                        }
                    
                    } else {
                        
                        if (templates[options.name] == undefined){
                            templates[options.name] = [];
                        }
                        
                        if (options.vars == undefined){
                            var vars = [];
                        } else {
                            var vars = options.vars.split(s.delimiter);
                        }
                        
                        templates[options.name] = { 'template': $that.detach(), 'vars': vars };
                    
                    }
                    
                    break;</pre></td></tr><tr class="docu"><td class="comment instruction">&nbsp;</td><td class="code instruction"><span class="itype"><img src="imgs/sourcemakeup.codeblock.png">  codeblock</span>:<span class="iopt"> /command-template</span></td></tr><tr class="docu"><td class="comment">
</td><td class="code"><pre class="linenumbers">3325
3326
3327
3328
3329</pre><pre class="prettyprint">            }
            
            return $that;
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="filterelements">filterElements</h3>

<p>The <strong>filterElements</strong> function</p>
</td><td class="code"><pre class="linenumbers">3336
3337
3338
3339
3340
3341
3342
3343
3344
3345
3346
3347
3348
3349
3350
3351
3352
3353
3354
3355
3356
3357
3358
3359
3360
3361
3362
3363
3364
3365
3366
3367
3368
3369
3370
3371
3372
3373
3374
3375
3376
3377
3378
3379
3380
3381
3382
3383
3384
3385
3386
3387
3388
3389
3390
3391
3392</pre><pre class="prettyprint">        plugin.filterElements = function($el, options){
            
            var selections = [];
            
            $el.find('.jkit-filter').each( function(){
                var vals = [];
                var valsplit = $(this).val().split(' ');
                $.each( valsplit, function(i,v){
                    v = $.trim(v);
                    if (v != '') vals.push(v);
                });
                selections = selections.concat(vals);
            });
            
            if (options.global == 'yes'){
                $container = $('body');
            } else {
                $container = $el;
            }
            
            $container.find(options.affected).each( function(){
                
                var $current = $(this);
                
                if (selections.length &gt; 0){
                    
                    var found = [];
                    
                    $.each( selections, function(i,v){
                        if (options.by == 'class'){
                            if ($current.hasClass(v)){
                                found.push(v);
                            }
                        } else if (options.by == 'text'){
                            if ($current.text().toLowerCase().indexOf(v.toLowerCase()) &gt; -1){
                                found.push(v);
                            }
                        }
                    });
                    
                    if ( found.length == selections.length || (found.length &gt; 0 &amp;&amp; options.logic == 'or') ){
                        $current.jKit_effect(true, options.animation, options.speed, options.easing, 0);
                    } else {
                        $current.jKit_effect(false, options.animation, options.speed, options.easing, 0);
                    }
                
                } else {
                    $current.jKit_effect(true, options.animation, options.speed, options.easing, 0);
                }
            
            });
            
            setTimeout( function(){
                plugin.triggerEvent('complete', $el, options);
            }, options.speed);
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="readapi">readAPI</h3>

<p>The <strong>readAPI</strong> function</p>
</td><td class="code"><pre class="linenumbers">3399
3400
3401
3402
3403
3404
3405
3406
3407
3408
3409
3410
3411
3412
3413
3414
3415
3416
3417
3418
3419
3420
3421
3422
3423
3424
3425
3426
3427
3428
3429
3430
3431
3432
3433
3434
3435
3436
3437
3438
3439
3440
3441
3442
3443
3444
3445
3446
3447
3448
3449
3450
3451
3452
3453
3454
3455
3456
3457
3458
3459</pre><pre class="prettyprint">        plugin.readAPI = function($el, options){
            
            if (options.format == 'json'){
                
                $.ajax({
                    type: &quot;GET&quot;,
                    url: options.url,
                    contentType: &quot;application/json; charset=utf-8&quot;,
                    dataType: &quot;jsonp&quot;,
                    error: function(){
                        plugin.triggerEvent('error', $el, options);
                    },
                    success: function(data) {
                        
                        if (options.template != ''){
                            
                            $el.html(templates[options.template].template.clone().show());
                            $el.find('[data-jkit-api]').each(function(){
                                var value = $(this).attr('data-jkit-api');
                                try {
                                    $(this).text(eval('data.'+value.replace(/[^a-zA-Z0-9\.\[\]\_]+/g, '')));
                                } catch(err) { }
                            });
                            $el.find('[data-jkit-api-if]').each(function(){
                                var value = $(this).attr('data-jkit-api-if');
                                var test = undefined;
                                try {
                                    eval('test = data.'+value.replace(/[^a-zA-Z0-9\.\[\]\_]+/g, ''));
                                } catch(err) { }
                                if (test == undefined){
                                    $(this).remove();
                                }
                            });
                        
                        } else {
                            
                            if (options.value != ''){
                                try {
                                    $el.text(eval('data.'+options.value.replace(/[^a-zA-Z0-9\.\[\]\_]+/g, '')));
                                } catch(err) { }
                            } else {
                                $el.text(data);
                            }
                        
                        }
                        
                        if (options.macro != undefined) plugin.applyMacro($el, options.macro);
                        
                        plugin.triggerEvent('complete', $el, options);
                        
                        if (options.interval &gt; -1){
                            setTimeout( function(){
                                plugin.readAPI($el, options);
                            }, options.interval*1000);
                        }
                    
                    }
                });
            }
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="triggerevent">triggerEvent</h3>

<p>The <strong>triggerEvent</strong> function</p>
</td><td class="code"><pre class="linenumbers">3466
3467
3468
3469
3470
3471
3472
3473
3474
3475
3476
3477
3478</pre><pre class="prettyprint">        plugin.triggerEvent = function(event, $el, options){
            
            if (options.commandkey !== undefined){
                
                var eventsplit = event.split(' ');
                
                $.each( eventsplit, function(i,v){
                    $element.trigger(options.commandkey+'.'+v, { 'element': $el, 'options': options });
                });
            
            }
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="cssfromstring">cssFromString</h3>

<p>The <strong>cssFromString</strong> function</p>
</td><td class="code"><pre class="linenumbers">3485
3486
3487
3488
3489
3490
3491
3492
3493
3494
3495
3496
3497</pre><pre class="prettyprint">        plugin.cssFromString = function(css){
            var partsplit = css.split(',');
            var cssdata = {};
            $.each( partsplit, function(i,v){
                var innersplit = v.split('(');
                if (innersplit.length == 2){
                    var property = innersplit[0];
                    var value = innersplit[1].slice(0,-1);
                    cssdata[property] = value;
                }
            });
            return cssdata;
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="prefix">preFix</h3>

<p>The <strong>preFix</strong> function</p>
</td><td class="code"><pre class="linenumbers">3504
3505
3506
3507
3508
3509
3510
3511
3512
3513
3514
3515
3516
3517
3518
3519
3520
3521
3522
3523
3524
3525
3526
3527
3528
3529
3530
3531</pre><pre class="prettyprint">        plugin.preFix = function(str){
            
            var lines = str.split(&quot;\n&quot;);
            var min = 9999;
            
            $.each( lines, function(i,v){
                if ($.trim(v) != ''){
                    
                    var cnt = -1;
                    
                    while(v.charAt(cnt+1) == &quot;\t&quot;){
                        cnt++;
                    }
                    cnt++;
                    
                    if (cnt &lt; min){
                        min = cnt;
                    }
                
                }
            });
            
            $.each( lines, function(i,v){
                lines[i] = v.substr(min);
            });
            
            return lines.join(&quot;\n&quot;);
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="ticker">ticker</h3>

<p>The <strong>ticker</strong> function</p>
</td><td class="code"><pre class="linenumbers">3538
3539
3540
3541
3542
3543
3544
3545
3546
3547
3548
3549
3550
3551
3552
3553
3554
3555
3556
3557
3558
3559
3560
3561
3562
3563
3564
3565
3566
3567
3568
3569
3570
3571
3572
3573
3574
3575
3576
3577
3578
3579
3580</pre><pre class="prettyprint">        plugin.ticker = function($el, options, messages, currentmessage, currentchar){
            
            var stopped = false;
            
            if ((windowhasfocus || !windowhasfocus &amp;&amp; plugin.settings.ignoreFocus) &amp;&amp; ($el.jKit_inViewport() || !$el.jKit_inViewport() &amp;&amp; plugin.settings.ignoreViewport)){
                var timer =  options.speed;
                
                currentchar++;
                if (currentchar &gt; messages[currentmessage].text.length){
                    
                    timer = options.delay;
                    
                    currentmessage++;
                    if (currentmessage &gt;= messages.length){
                        if (options.loop == 'yes' &amp;&amp; messages.length &gt; 1){
                            currentmessage = 0;
                        } else {
                            stopped = true;
                        }
                    }
                    
                    if (!stopped){
                        setTimeout( function(){
                            plugin.triggerEvent('showentry showentry'+(currentmessage+1), $el, options);
                        }, timer);
                    
                        currentchar = 0;
                    }
                
                } else {
                    if (messages[currentmessage].href != undefined){
                        $el.html('&lt;a href=&quot;'+messages[currentmessage].href+'&quot; target=&quot;'+messages[currentmessage].target+'&quot;&gt;'+messages[currentmessage].text.substr(0,currentchar)+'&lt;/a&gt;');
                    } else {
                        $el.html(messages[currentmessage].text.substr(0,currentchar));
                    }
                }
            }
            
            if (!stopped){
                window.setTimeout( function() { plugin.ticker($el, options, messages, currentmessage, currentchar); }, timer);
            }
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="loadandreplace">loadAndReplace</h3>

<p>The <strong>loadAndReplace</strong> function</p>
</td><td class="code"><pre class="linenumbers">3587
3588
3589
3590
3591
3592
3593
3594
3595
3596
3597
3598
3599
3600
3601
3602
3603
3604
3605
3606
3607
3608
3609
3610
3611
3612
3613
3614
3615</pre><pre class="prettyprint">        plugin.loadAndReplace = function(href, options, $el){
            
            var tempid = plugin.settings.prefix+'_ajax_temp_'+$.fn.jKit_getUnixtime();
            
            $(options.element).jKit_effect(false, options.animation, options.speed, options.easing, 0, function(){
                
                $(options.element).html('');
                
                jQuery('&lt;div/&gt;', {
                    id: tempid
                }).appendTo('body');
                
                $('#'+tempid).load(href+' '+options.element, function() {
                    
                    plugin.triggerEvent('complete', $el, options);
                    
                    $(options.element).html( $('#'+tempid+' '+options.element).html() );
                    plugin.init($(options.element));
                    $(options.element).jKit_effect(true, options.animation, options.speed, options.easing);
                    
                    if (options.macro != undefined) plugin.applyMacro($(options.element), options.macro);
                    
                    $('#'+tempid).remove();
                
                });
            
            });
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="updatesrc">updateSrc</h3>

<p>The <strong>updateSrc</strong> function</p>
</td><td class="code"><pre class="linenumbers">3622
3623
3624
3625
3626
3627
3628
3629
3630
3631
3632</pre><pre class="prettyprint">        plugin.updateSrc = function($el, options){
            
            if ((windowhasfocus || !windowhasfocus &amp;&amp; plugin.settings.ignoreFocus) &amp;&amp; ($el.jKit_inViewport() || !$el.jKit_inViewport() &amp;&amp; plugin.settings.ignoreViewport)){
                
                var srcSplit = $el.attr('src').split('?');
                
                $el.attr('src', srcSplit[0]+'?t='+$.fn.jKit_getUnixtime());
            
            }
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="applytemplate">applyTemplate</h3>

<p>The <strong>applyTemplate</strong> function</p>
</td><td class="code"><pre class="linenumbers">3639
3640
3641
3642
3643
3644
3645
3646
3647
3648
3649
3650
3651
3652
3653
3654
3655
3656
3657
3658
3659
3660
3661
3662
3663
3664
3665
3666
3667
3668
3669
3670
3671
3672
3673
3674
3675
3676
3677
3678</pre><pre class="prettyprint">        plugin.applyTemplate = function($el, options, cnt, entries){
            
            var content = {};
            $.each( templates[options.name].vars, function(i,v){
                var $subEls = $el.find('.'+v);
                plugin.init($subEls);
                if ($subEls.val() != ''){
                    content[v] = $subEls.val();
                } else {
                    content[v] = $subEls.html();
                }
            });
            
            $el.html(templates[options.name].template.clone().show());
            
            $el.find('[class^=&quot;if-entry-&quot;]').hide();
            
            plugin.renameDynamicAttributes($el, cnt);
            
            $.each( templates[options.name].vars, function(i,v){
                
                var $subEl = $el.find('.'+v);
                
                if ($subEl.is(&quot;input&quot;) || $subEl.is(&quot;select&quot;) || $subEl.is(&quot;textarea&quot;)){
                    $subEl.val(content[v]);
                } else {
                    $subEl.html(content[v]);
                }
                
                if (content[v] == undefined &amp;&amp; $el.find('.if-'+v).length &gt; 0){
                    $el.find('.if-'+v).remove();
                }
                
                if (cnt == 1) $el.find('.if-entry-first').show();
                if (cnt == entries) $el.find('.if-entry-last').show();
                $el.find('.if-entry-nr-'+cnt).show();
            
            });
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="renamedynamicattributes">renameDynamicAttributes</h3>

<p>The <strong>renameDynamicAttributes</strong> function</p>
</td><td class="code"><pre class="linenumbers">3685
3686
3687
3688
3689
3690
3691
3692
3693
3694
3695
3696
3697
3698
3699
3700
3701
3702
3703
3704
3705
3706
3707
3708
3709
3710</pre><pre class="prettyprint">        plugin.renameDynamicAttributes = function($el, cnt){
            $el.find('[class^=&quot;dynamic-&quot;]').each( function(){
                
                var $subEl = $(this);
                var classList = $(this).attr('class').split(/\s+/);
                
                $.each( classList, function(i,v){
                    
                    var attribute = v.substr(8);
                    
                    if (attribute != '' &amp;&amp; $subEl.attr(attribute)){
                        
                        var currentAttr = $subEl.attr(attribute);
                        var pos = currentAttr.lastIndexOf('_');
                        if (pos &gt; -1){
                            currentAttr = currentAttr.substr(0,pos);
                        }
                        
                        $subEl.attr(attribute, currentAttr+'_'+cnt);
                    
                    }
                
                });
            
            });
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="binding">binding</h3>

<p>The <strong>binding</strong> function</p>
</td><td class="code"><pre class="linenumbers">3717
3718
3719
3720
3721
3722
3723
3724
3725
3726
3727
3728
3729
3730
3731
3732
3733
3734
3735
3736
3737
3738
3739
3740
3741
3742
3743
3744
3745
3746
3747
3748
3749
3750
3751
3752
3753
3754
3755
3756
3757
3758
3759
3760
3761
3762
3763
3764
3765
3766
3767
3768
3769
3770
3771
3772
3773
3774
3775
3776
3777
3778
3779
3780
3781
3782
3783
3784
3785
3786
3787
3788
3789
3790
3791
3792
3793
3794
3795
3796
3797
3798
3799
3800
3801
3802
3803
3804
3805
3806
3807
3808
3809
3810
3811
3812
3813
3814
3815
3816
3817
3818
3819
3820
3821
3822
3823
3824
3825
3826
3827
3828
3829
3830
3831
3832
3833
3834
3835
3836
3837
3838
3839
3840
3841
3842
3843
3844
3845
3846
3847
3848
3849
3850
3851
3852
3853
3854
3855
3856
3857
3858
3859
3860
3861
3862
3863
3864
3865
3866
3867
3868
3869
3870
3871
3872
3873
3874
3875
3876
3877
3878
3879
3880
3881
3882
3883
3884
3885
3886
3887
3888
3889
3890
3891
3892
3893
3894
3895
3896
3897
3898
3899
3900
3901
3902
3903
3904
3905
3906
3907
3908
3909
3910
3911
3912
3913
3914
3915
3916
3917
3918
3919
3920
3921
3922
3923
3924
3925
3926
3927
3928
3929
3930
3931
3932
3933
3934
3935
3936
3937
3938
3939
3940
3941
3942
3943
3944
3945
3946
3947
3948
3949
3950
3951
3952
3953
3954
3955
3956
3957
3958
3959
3960
3961
3962
3963
3964
3965
3966
3967
3968
3969
3970
3971
3972
3973
3974
3975
3976
3977
3978
3979
3980
3981
3982
3983
3984
3985
3986
3987
3988
3989
3990
3991
3992
3993
3994
3995
3996
3997
3998
3999
4000
4001
4002
4003
4004
4005
4006
4007
4008
4009
4010
4011
4012
4013
4014
4015
4016
4017
4018
4019
4020
4021
4022</pre><pre class="prettyprint">        plugin.binding = function(el, options){
            
            if (windowhasfocus || !windowhasfocus &amp;&amp; plugin.settings.ignoreFocus){
                
                if (options.value == undefined){
                    if (options.selector != ''){
                        var selsplit = options.selector.split('|');
                        var sourcesplit = options.source.split('.');
                        
                        var values = [];
                        $.each(selsplit, function(i, v) {
                            
                            if (v == 'this'){
                                v = el;
                            } else if (v == 'parent'){
                                v = $(el).parent().get(0);
                            }
                            
                            $(v).each( function(){
                                
                                switch(sourcesplit[0]){
                                    case 'event':
                                        
                                        $(this).on( sourcesplit[1], function(e){
                                            options.value = 1;
                                            plugin.binding(el, options);
                                            if (options.macro != undefined) plugin.applyMacro($(el), options.macro);
                                        });
                                        
                                        break;
                                        
                                    case 'html':
                                        
                                        var temp = $(this).html();
                                        
                                        break;
                                    
                                    case 'text':
                                        
                                        var temp = $(this).text();
                                        
                                        break;
                                    
                                    case 'attr':
                                        
                                        var temp = $(this).attr(sourcesplit[1]);
                                        
                                        break;
                                    
                                    case 'css':
                                        if (sourcesplit[1] == 'height'){
                                            var temp = $(this).height();
                                        } else if (sourcesplit[1] == 'innerHeight'){
                                            var temp = $(this).innerHeight();
                                        } else if (sourcesplit[1] == 'outerHeight'){
                                            var temp = $(this).outerHeight();
                                        } else if (sourcesplit[1] == 'width'){
                                            var temp = $(this).width();
                                        } else if (sourcesplit[1] == 'innerWidth'){
                                            var temp = $(this).innerWidth();
                                        } else if (sourcesplit[1] == 'outerWidth'){
                                            var temp = $(this).outerWidth();
                                        } else if (sourcesplit[1] == 'scrollTop'){
                                            var temp = $(this).scrollTop();
                                        } else if (sourcesplit[1] == 'scrollLeft'){
                                            var temp = $(this).scrollLeft();
                                        } else {
                                            var temp = $(this).css(sourcesplit[1]);
                                        }
                                        
                                        break;
                                        
                                    case 'scroll':
                                        
                                        switch(sourcesplit[1]){
                                            case 'top':
                                                var temp = $(window).scrollTop();
                                                break;
                                            case 'left':
                                                var temp = $(window).scrollLeft();
                                                break;
                                        }
                                        
                                        break;
                                        
                                    case 'clearance':
                                        
                                        var cTop = el.offset().top-$(window).scrollTop();
                                        var cBottom = $(window).scrollTop() + $(window).height() - ( el.offset().top + el.height() );
                                        
                                        var cRight = ($(window).width() + $(window).scrollLeft()) - (el.offset().left + el.width());
                                        var cLeft = el.offset().left - $(window).scrollLeft();
                                        
                                        switch(sourcesplit[1]){
                                            case 'bottom':
                                                var temp = cBottom;
                                                break;
                                            case 'top':
                                                var temp = cTop;
                                                break;
                                            case 'right':
                                                var temp = cRight;
                                                break;
                                            case 'left':
                                                var temp = cLeft;
                                                break;
                                            default:
                                                var temp = Math.min.apply(Math, [ cBottom, cTop, cRight, cLeft ]);
                                        }
                                        
                                        break;
                                        
                                    case 'has':
                                        
                                        switch(sourcesplit[1]){
                                            case 'class':
                                                var temp = $(this).hasClass(options.search);
                                                break;
                                            case 'text':
                                                var temp = $.fn.jKit_stringOccurrences($(this).text().toLowerCase(), options.search.toLowerCase());
                                                break;
                                            case 'attribute':
                                                var temp = ($(this).attr(options.search) !== undefined);
                                                break;
                                            case 'val':
                                                var temp = $.fn.jKit_stringOccurrences($(this).val().toLowerCase(), options.search.toLowerCase());
                                                break;
                                            case 'element':
                                                var temp = $(this).find(options.search).length;
                                                break;
                                            case 'children':
                                                var temp = $(this).children(options.search).length;
                                                break;
                                            case 'hash':
                                                var temp = (window.location.hash == options.search);
                                                break;
                                        }
                                        
                                        break;
                                    
                                    case 'location':
                                        
                                        var temp = window.location[sourcesplit[1]];
                                        
                                        break;
                                    
                                    case 'val':
                                    default:
                                        var temp = $(this).val();
                                }
                                
                                values.push(temp);
                            
                            });
                        });
                        
                        if (sourcesplit[2] != undefined){
                            var value = '';
                            
                            switch(sourcesplit[2]){
                                case 'max':
                                    value = Math.max.apply(Math, values);
                                    break;
                                case 'min':
                                    value = Math.min.apply(Math, values);
                                    break;
                                case 'sum':
                                    value = values.reduce(function(a,b){return a+b;});
                                    break;
                                case 'avg':
                                    value = values.reduce(function(a,b){return a+b;}) / values.length;
                                    break;
                            }
                        
                        } else {
                            var value = values[0];
                        }
                    
                    } else if (options.variable != ''){
                        var value = window[options.variable];
                    }
                } else {
                    value = options.value;
                }
                
                if (!isNaN(value) &amp;&amp; parseInt(value) == value){
                    
                    if (options.accuracy != ''){
                        value = Math.round(value / options.accuracy) * options.accuracy;
                    }
            
                    if (options.min != '' &amp;&amp; value &lt; options.min){
                        value = options.min;
                    }
                    
                    if (options.max != '' &amp;&amp; value &gt; options.max){
                        value = options.max;
                    }
                    
                }
                
                var doit;
                var rev = false;
                
                if (options.condition != ''){
                    doit = false;
                    eval('if ('+options.condition.replace(/[^a-zA-Z 0-9#\&lt;\&gt;\=\.\!\']+/g, '')+') doit = true;');
                } else {
                    if (value === false){
                        doit = false;
                        rev = true;
                    } else {
                        doit = true;
                    }
                }
                
                if (commandkeys[options.commandkey]['condition'] == undefined || commandkeys[options.commandkey]['condition'] != doit){
                    
                    if (doit){
                        plugin.triggerEvent('true', $(el), options);
                    } else {
                        plugin.triggerEvent('false', $(el), options);
                    }
                    
                    commandkeys[options.commandkey]['condition'] = doit;
                    
                }
                
                if (rev){
                    doit = true;
                }
                
                if (!doit &amp;&amp; options['else'] != ''){
                    doit = true;
                    value = options['else'];
                } else if (doit &amp;&amp; options['if'] != ''){
                    doit = true;
                    value = options['if'];
                }
                
                if (doit){
                    if (options.math != ''){
                        eval('value = '+options.math.replace(/[^a-zA-Z 0-9\+\-\*\/\.]+/g, '')+';');
                    }
                    
                    if (options.trigger == 'yes'){
                        if (commandkeys[options.commandkey]['triggervalue'] == undefined || commandkeys[options.commandkey]['triggervalue'] != value){
                            if (commandkeys[options.commandkey]['triggervalue'] !== undefined){
                                plugin.triggerEvent('notvalue'+commandkeys[options.commandkey]['triggervalue'], $(el), options);
                            }
                            plugin.triggerEvent('value'+value, $(el), options);
                            commandkeys[options.commandkey]['triggervalue'] = value;
                        }
                    }
                    
                    var modesplit = options.mode.split('.');
                    switch(modesplit[0]){
                        case 'text':
                            el.text(value);
                            break;
                        case 'html':
                            el.html(value);
                            break;
                        case 'val':
                            el.val(value);
                            break;
                        case 'attr':
                            el.attr(modesplit[1], value);
                            break;
                        case 'css':
                            if (modesplit[1] == 'display'){
                                if ($.trim(value) == '' || $.trim(value) == 0 || !value){
                                    value = 'none';
                                } else {
                                    if (modesplit[2] !== undefined){
                                        value = modesplit[2];
                                    }
                                }
                            }
                            if (options.speed &gt; 0){
                                var style = {};
                                style[modesplit[1]] =  value;
                                el.animate(style, options.speed, options.easing);
                            } else {
                                el.css(modesplit[1], value);
                            }
                            break;
                        case 'none':
                            break;
                        default:
                            if (modesplit[0] != undefined){
                                var fn = window[modesplit[0]];
                                if(typeof fn === 'function') {
                                    fn(value,el);
                                }
                            }
                    }
                }
            
            }
            
            if (options.interval != -1){
                window.setTimeout( function() { plugin.binding(el, options); }, options.interval);
            }
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="fixspeed">fixSpeed</h3>

<p>The <strong>fixSpeed</strong> function</p>
</td><td class="code"><pre class="linenumbers">4029
4030
4031
4032
4033
4034
4035
4036</pre><pre class="prettyprint">        plugin.fixSpeed = function(speed){
            
            if (speed != 'fast' &amp;&amp; speed != 'slow'){
                speed = parseInt(speed);
            }
            
            return speed;
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="loop">loop</h3>

<p>The <strong>loop</strong> function</p>
</td><td class="code"><pre class="linenumbers">4043
4044
4045
4046
4047
4048
4049
4050
4051
4052
4053
4054
4055
4056
4057
4058</pre><pre class="prettyprint">        plugin.loop = function($that, options){
            
            if ((windowhasfocus || !windowhasfocus &amp;&amp; plugin.settings.ignoreFocus) &amp;&amp; ($that.jKit_inViewport() || !$that.jKit_inViewport &amp;&amp; plugin.settings.ignoreViewport)){
                
                plugin.triggerEvent('show', $that, options);
                
                $that.jKit_effect(true, options.animation, options.speed1, options.easing1, options.duration1, function(){
                    plugin.triggerEvent('hide', $that, options);
                    $that.jKit_effect(false, options.animation, options.speed2, options.easing2, options.duration2, plugin.loop($that, options));
                });
            
            } else {
                window.setTimeout( function() { plugin.loop($that, options); }, 100);
            }
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="scalefit">scaleFit</h3>

<p>The <strong>scaleFit</strong> function</p>
</td><td class="code"><pre class="linenumbers">4065
4066
4067
4068
4069
4070
4071
4072
4073
4074
4075
4076
4077
4078
4079
4080
4081
4082
4083
4084
4085
4086
4087
4088
4089
4090
4091
4092
4093
4094
4095
4096
4097
4098
4099
4100
4101</pre><pre class="prettyprint">        plugin.scaleFit = function(bg, element, originalWidth, originalHeight, distort){
            
            var w = $(window).width();
            var h = $(window).height();
            
            bg.css({
                'width': w+'px',
                'height': h+'px'
            });
            
            var top = 0;
            var left = 0;
            
            if (distort == 'no'){
                
                var imgRatio = originalWidth / originalHeight;
                var screenRatio = w / h;
                
                if (imgRatio &gt; screenRatio){
                    w = h * imgRatio;
                    left = (w - $(window).width()) / 2 * -1;
                } else {
                    h = w / imgRatio;
                    top = (h - $(window).height()) / 2 * -1;
                }
            
            }
            
            element.css({
                'position': 'fixed',
                'top': top+'px',
                'left': left+'px',
                'width': w+'px',
                'height': h+'px'
            });
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="carousel">carousel</h3>

<p>The <strong>carousel</strong> function</p>
</td><td class="code"><pre class="linenumbers">4108
4109
4110
4111
4112
4113
4114
4115
4116
4117
4118
4119
4120
4121
4122
4123
4124
4125
4126
4127
4128
4129
4130
4131
4132
4133
4134
4135
4136
4137
4138
4139
4140
4141
4142
4143
4144
4145
4146
4147
4148
4149
4150
4151
4152
4153
4154
4155
4156
4157</pre><pre class="prettyprint">        plugin.carousel = function($el, options, dir){
            
            if (dir != undefined){
                options.autoplay = false;
            }
            
            if ((windowhasfocus || !windowhasfocus &amp;&amp; plugin.settings.ignoreFocus) &amp;&amp; ($el.jKit_inViewport() || !$el.jKit_inViewport() &amp;&amp; plugin.settings.ignoreViewport)){
                
                var isAnimated = false;
                $el.children().each( function(){
                    if ( $(this).is(':animated') ) {
                        isAnimated = true;
                    }
                });
                
                if (!isAnimated) {

                    var pos = Math.min(options.limit, $el.children().length);

                    if (dir == 'next' || dir == undefined) {

                        plugin.triggerEvent('shownext', $el, options);

                        $el.children(':first-child').jKit_effect(false, options.animation, options.speed, options.easing, 0, function(){
                            $el.append($el.children(':nth-child(1)'));
                            $el.children(':nth-child('+pos+')').jKit_effect(true, options.animation, options.speed, options.easing, 0);
                        });
                        
                    } else if (dir == 'prev') {

                        plugin.triggerEvent('showprev', $el, options);

                        $el.children(':nth-child('+pos+')').jKit_effect(false, options.animation, options.speed, options.easing, 0, function(){
                            $el.prepend( $el.children(':last-child') );
                            $el.children(':first-child').jKit_effect(true, options.animation, options.speed, options.easing, 0);
                        });
                             
                    }
                    
                }
                
                if (options.autoplay == 'yes'){
                    window.setTimeout( function() { plugin.carousel($el, options); }, options.interval);
                }
            
            } else {
                window.setTimeout( function() { plugin.carousel($el, options); }, options.interval);
            }
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="slideshow">slideshow</h3>

<p>The <strong>slideshow</strong> function</p>
</td><td class="code"><pre class="linenumbers">4164
4165
4166
4167
4168
4169
4170
4171
4172
4173
4174
4175
4176
4177
4178
4179
4180
4181
4182
4183
4184
4185
4186
4187
4188
4189
4190
4191
4192</pre><pre class="prettyprint">        plugin.slideshow = function(slides, current, el, options){
            
            if ($.data(el, 'anim')){
                if ((windowhasfocus || !windowhasfocus &amp;&amp; plugin.settings.ignoreFocus) &amp;&amp; (el.jKit_inViewport() || !el.jKit_inViewport() &amp;&amp; plugin.settings.ignoreViewport)){
                    
                    if (current &lt; (slides.length-1)){
                        current++;
                    } else {
                        current = 0;
                    }
                    
                    plugin.triggerEvent('hideentry hideentry'+(current+1), el, options);
                    
                    el.jKit_effect(false, options.animation, options.speed, options.easing, 0, function(){
                        el.html(slides[current]);
                        
                        plugin.triggerEvent('showentry showentry'+(current+1), el, options);
                        
                        el.jKit_effect(true, options.animation, options.speed, options.easing, 0, function(){
                            window.setTimeout( function() { plugin.slideshow(slides, current, el, options); }, options.interval);
                        });
                    });
                
                } else {
                    window.setTimeout( function() { plugin.slideshow(slides, current, el, options); }, options.interval);
                }
            }
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="animation">animation</h3>

<p>The <strong>animation</strong> function</p>
</td><td class="code"><pre class="linenumbers">4199
4200
4201
4202
4203
4204
4205
4206
4207
4208
4209
4210
4211
4212
4213
4214
4215
4216
4217
4218
4219
4220
4221
4222
4223
4224
4225
4226
4227
4228
4229
4230
4231
4232
4233
4234
4235
4236
4237
4238
4239
4240
4241
4242
4243
4244
4245
4246
4247
4248
4249
4250
4251
4252
4253
4254
4255</pre><pre class="prettyprint">        plugin.animation = function(frames, current, el, options){
            
            if ((windowhasfocus || !windowhasfocus &amp;&amp; plugin.settings.ignoreFocus) &amp;&amp; (el.jKit_inViewport() || !el.jKit_inViewport() &amp;&amp; plugin.settings.ignoreViewport)){
                
                plugin.triggerEvent('showframe showframe'+(current+1), el, options);
                
                $.each( frames, function(index, value){
                    if (value.start == current){
                        
                        el.html(value.el.clone());
                        var duration = (value.end - value.start) * options.interval;
                        
                        if (value.action == 'fadeout'){
                            el.children(&quot;:first&quot;).show().fadeTo(duration, 0, value.easing);
                        } else if (value.action == 'fadein'){
                            el.children(&quot;:first&quot;).hide().fadeTo(duration, 1, value.easing);
                        } else if (value.action == 'fadeinout'){
                            el.children(&quot;:first&quot;).hide().fadeTo(duration/2, 1, value.easing).fadeTo(duration/2, 0, value.easing);
                        } else if (value.action == 'tween'){
                            var next = frames[index+1].el;
                            el.children(&quot;:first&quot;).animate({
                                'font-size': next.css('font-size'),
                                'letter-spacing': next.css('letter-spacing'),
                                'color': next.css('color'),
                                'opacity': next.css('opacity'),
                                'background-color': next.css('background-color'),
                                'padding-top': next.css('padding-top'),
                                'padding-bottom': next.css('padding-bottom'),
                                'padding-left': next.css('padding-left'),
                                'padding-right': next.css('padding-right')
                            }, duration, value.easing);
                        }
                    
                    }
                })
                
                current++;
                var nextloop = false;
                if (current &gt; options.lastframe){
                    current = 0;
                    nextloop = true;
                }
                
                if ((nextloop &amp;&amp; options.loop == &quot;yes&quot;) || !nextloop){
                    window.setTimeout( function() { plugin.animation(frames, current, el, options); }, options.interval);
                }
                
                if (options.loop == &quot;no&quot;){
                    if (options.macro != undefined) plugin.applyMacro(el, options.macro);
                    plugin.triggerEvent('complete', el, options);
                }
            
            } else {
                window.setTimeout( function() { plugin.animation(frames, current, el, options); }, options.interval);
            }
        
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="closelightbox">closeLightbox</h3>

<p>The <strong>closeLightbox</strong> function</p>
</td><td class="code"><pre class="linenumbers">4262
4263
4264
4265
4266</pre><pre class="prettyprint">        plugin.closeLightbox = function(){
            $('.'+plugin.settings.prefix+'-lightbox-el').fadeTo('fast', 0, function(){
                $(this).remove();
            });
        };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="addkeypressevents">addKeypressEvents</h3>

<p>The <strong>addKeypressEvents</strong> function</p>
</td><td class="code"><pre class="linenumbers">4273
4274
4275
4276
4277
4278
4279
4280
4281
4282
4283
4284
4285
4286
4287
4288
4289
4290
4291
4292
4293
4294
4295
4296
4297
4298
4299
4300
4301
4302
4303
4304
4305
4306
4307
4308
4309
4310
4311
4312
4313
4314
4315
4316
4317
4318
4319
4320
4321
4322
4323
4324
4325
4326
4327
4328
4329
4330
4331
4332
4333
4334
4335
4336
4337
4338
4339
4340
4341
4342
4343
4344
4345
4346
4347
4348
4349
4350
4351
4352
4353
4354
4355
4356
4357
4358
4359
4360</pre><pre class="prettyprint">        plugin.addKeypressEvents = function($el, code){
            if (plugin.settings.keyNavigation){
                $(document).keydown(function(e){
                    
                    if ( this !== e.target &amp;&amp; (/textarea|select/i.test( e.target.nodeName ) || e.target.type === &quot;text&quot;) ) return;
                    
                    var keys = {
                        8: &quot;backspace&quot;,
                        9: &quot;tab&quot;,
                        13: &quot;return&quot;,
                        16: &quot;shift&quot;,
                        17: &quot;ctrl&quot;,
                        18: &quot;alt&quot;,
                        19: &quot;pause&quot;,
                        20: &quot;capslock&quot;,
                        27: &quot;esc&quot;,
                        32: &quot;space&quot;,
                        33: &quot;pageup&quot;,
                        34: &quot;pagedown&quot;,
                        35: &quot;end&quot;,
                        36: &quot;home&quot;,
                        37: &quot;left&quot;,
                        38: &quot;up&quot;,
                        39: &quot;right&quot;,
                        40: &quot;down&quot;,
                        45: &quot;insert&quot;,
                        46: &quot;del&quot;,
                        96: &quot;0&quot;,
                        97: &quot;1&quot;,
                        98: &quot;2&quot;,
                        99: &quot;3&quot;,
                        100: &quot;4&quot;,
                        101: &quot;5&quot;,
                        102: &quot;6&quot;,
                        103: &quot;7&quot;,
                        104: &quot;8&quot;,
                        105: &quot;9&quot;,
                        106: &quot;*&quot;,
                        107: &quot;+&quot;,
                        109: &quot;-&quot;,
                        110: &quot;.&quot;,
                        111 : &quot;/&quot;,
                        112: &quot;f1&quot;,
                        113: &quot;f2&quot;,
                        114: &quot;f3&quot;,
                        115: &quot;f4&quot;,
                        116: &quot;f5&quot;,
                        117: &quot;f6&quot;,
                        118: &quot;f7&quot;,
                        119: &quot;f8&quot;,
                        120: &quot;f9&quot;,
                        121: &quot;f10&quot;,
                        122: &quot;f11&quot;,
                        123: &quot;f12&quot;,
                        144: &quot;numlock&quot;,
                        145: &quot;scroll&quot;,
                        191: &quot;/&quot;,
                        224: &quot;meta&quot;
                    };
                    
                    for(var i=48; i&lt;=90; i++){
                        keys[i] = String.fromCharCode(i).toLowerCase();
                    }
                    
                    if ($.inArray(e.which, keys)){
                        
                        var special = '';
                        if (e.altKey) special += 'alt+';
                        if (e.ctrlKey) special += 'ctrl+';
                        if (e.metaKey) special += 'meta+';
                        if (e.shiftKey) special += 'shift+';
                        
                        var keycode = special+keys[e.which];
                        
                        if (keycode == code){
                            $el.trigger(special+keys[e.which]);
                            e.preventDefault();
                        }
                    
                    }
                
                });
            }
        }
        
        plugin.init();
    
    };</pre></td></tr><tr class="docu"><td class="comment"><h2 id="jquery-plugin-functions">jQuery Plugin Functions</h2>

<p>The following functions act as jQuery plugins.</p>
</td><td class="code"><pre class="linenumbers"></pre><pre class="prettyprint"></pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-effect">jKit_effect</h3>

<p>The <strong>jKit_effect</strong> function</p>
</td><td class="code"><pre class="linenumbers">4372
4373
4374
4375
4376
4377
4378
4379
4380
4381
4382
4383
4384
4385
4386
4387
4388
4389
4390
4391
4392
4393
4394
4395
4396
4397
4398
4399
4400
4401
4402
4403
4404</pre><pre class="prettyprint">    $.fn.jKit_effect = function(show, type, speed, easing, delay, fn){
        return this.each(function() {
            if (fn == undefined) fn = function(){};
            if (delay == undefined) delay = 0;
            
            if (type == 'fade'){
                if (show){
                    $(this).delay(delay).fadeTo(speed, 1.0, easing, fn);
                } else {
                    $(this).delay(delay).fadeTo(speed, 0, easing, fn);
                }
            } else if (type == 'slide'){
                if (show){
                    $(this).delay(delay).slideDown(speed, easing, fn);
                } else {
                    $(this).delay(delay).slideUp(speed, easing, fn);
                }
            } else if (type == 'none'){
                if (show){
                    $(this).delay(delay).show();
                } else {
                    $(this).delay(delay).hide();
                }
                fn();
            } else {
                if (show){
                    $(this).delay(delay).show(speed, easing, fn);
                } else {
                    $(this).delay(delay).hide(speed, easing, fn);
                }
            }
        });
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-getunixtime">jKit_getUnixtime</h3>

<p>The <strong>jKit_getUnixtime</strong> function</p>
</td><td class="code"><pre class="linenumbers">4411
4412
4413
4414
4415</pre><pre class="prettyprint">    $.fn.jKit_getUnixtime = function(){
        var now = new Date;
        var unixtime_ms = now.getTime();
        return parseInt(unixtime_ms / 1000);
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-arrayshuffle">jKit_arrayShuffle</h3>

<p>The <strong>jKit_arrayShuffle</strong> function</p>
</td><td class="code"><pre class="linenumbers">4422
4423
4424
4425
4426
4427
4428
4429
4430
4431</pre><pre class="prettyprint">    $.fn.jKit_arrayShuffle = function(arr){
        var tmp, rand;
        for(var i =0; i &lt; arr.length; i++){
            rand = Math.floor(Math.random() * arr.length);
            tmp = arr[i];
            arr[i] = arr[rand];
            arr[rand] = tmp;
        }
        return arr;
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-stringoccurrences">jKit_stringOccurrences</h3>

<p>The <strong>jKit_stringOccurrences</strong> function</p>
</td><td class="code"><pre class="linenumbers">4437
4438
4439
4440
4441
4442
4443
4444
4445
4446
4447
4448
4449
4450
4451
4452
4453
4454</pre><pre class="prettyprint">    $.fn.jKit_stringOccurrences = function(string, substring){
        
        var n = 0;
        var pos = 0;
        
        while (true){
            pos = string.indexOf(substring, pos);
            if (pos != -1) {
                n++;
                pos += substring.length;
            } else {
                break;
            }
        }
        
        return (n);
    
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-emailcheck">jKit_emailCheck</h3>

<p>The <strong>jKit_emailCheck</strong> function</p>
</td><td class="code"><pre class="linenumbers">4461
4462
4463
4464</pre><pre class="prettyprint">    $.fn.jKit_emailCheck = function(string){
        var filter = /^[a-z0-9\._-]+@([a-z0-9_-]+\.)+[a-z]{2,6}$/i;
        return filter.test(string);
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-urlcheck">jKit_urlCheck</h3>

<p>The <strong>jKit_urlCheck</strong> function</p>
</td><td class="code"><pre class="linenumbers">4471
4472
4473
4474</pre><pre class="prettyprint">    $.fn.jKit_urlCheck = function(string){
        var filter = /^(?:(ftp|http|https):\/\/)?(?:[\w\-]+\.)+[a-z]{2,6}$/i;
        return filter.test(string);
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-datecheck">jKit_dateCheck</h3>

<p>The <strong>jKit_dateCheck</strong> function</p>
</td><td class="code"><pre class="linenumbers">4481
4482
4483
4484</pre><pre class="prettyprint">    $.fn.jKit_dateCheck = function(string){
        var filter = /^[0-9]{2}\.[0-9]{2}\.[0-9]{2}$/i;
        return filter.test(string);
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-timecheck">jKit_timeCheck</h3>

<p>The <strong>jKit_timeCheck</strong> function</p>
</td><td class="code"><pre class="linenumbers">4491
4492
4493
4494</pre><pre class="prettyprint">    $.fn.jKit_timeCheck = function(string){
        var filter = /^[0-9]{1,2}\:[0-9]{2}$/i;
        return filter.test(string);
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-phonecheck">jKit_phoneCheck</h3>

<p>The <strong>jKit_phoneCheck</strong> function</p>
</td><td class="code"><pre class="linenumbers">4501
4502
4503
4504</pre><pre class="prettyprint">    $.fn.jKit_phoneCheck = function(string){
        var filter = /^(\+|0)[\d ]+(-\d*)?\d$/;
        return filter.test(string);
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-passwordstrength">jKit_passwordStrength</h3>

<p>The <strong>jKit_passwordStrength</strong> function</p>
</td><td class="code"><pre class="linenumbers">4511
4512
4513
4514
4515
4516
4517
4518
4519
4520
4521
4522
4523
4524
4525
4526
4527
4528
4529
4530
4531
4532
4533</pre><pre class="prettyprint">    $.fn.jKit_passwordStrength = function(passwd){
        var intScore = 0
        
        if (passwd.length &lt; 5){
            intScore = intScore + 5;
        } else if (passwd.length &gt; 4 &amp;&amp; passwd.length &lt; 8){
            intScore = intScore + 15;
        } else if (passwd.length &gt;= 8){
            intScore = intScore + 30;
        }
        
        if (passwd.match(/[a-z]/)) intScore = intScore + 5;
        if (passwd.match(/[A-Z]/)) intScore = intScore + 10;
        if (passwd.match(/\d+/)) intScore = intScore + 10;
        if (passwd.match(/(.*[0-9].*[0-9].*[0-9])/)) intScore = intScore + 10;
        if (passwd.match(/.[!,@,#,$,%,^,&amp;,*,?,_,~]/)) intScore = intScore + 10;
        if (passwd.match(/(.*[!,@,#,$,%,^,&amp;,*,?,_,~].*[!,@,#,$,%,^,&amp;,*,?,_,~])/)) intScore = intScore + 10;
        if (passwd.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) intScore = intScore + 5;
        if (passwd.match(/([a-zA-Z])/) &amp;&amp; passwd.match(/([0-9])/)) intScore = intScore + 5;
        if (passwd.match(/([a-zA-Z0-9].*[!,@,#,$,%,^,&amp;,*,?,_,~])|([!,@,#,$,%,^,&amp;,*,?,_,~].*[a-zA-Z0-9])/)) intScore = intScore + 5;
        
        return intScore;
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-getattributes">jKit_getAttributes</h3>

<p>The <strong>jKit_getAttributes</strong> function</p>
</td><td class="code"><pre class="linenumbers">4540
4541
4542
4543
4544
4545
4546
4547
4548
4549
4550
4551
4552</pre><pre class="prettyprint">    $.fn.jKit_getAttributes = function(){
        return this.each(function() {
            var map = {};
            var attributes = $(this)[0].attributes;
            var aLength = attributes.length;
            
            for (var a = 0; a &lt; aLength; a++) {
                    map[attributes[a].name.toLowerCase()] = attributes[a].value;
            }
            
            return map;
        });
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-setattributes">jKit_setAttributes</h3>

<p>The <strong>jKit_setAttributes</strong> function</p>
</td><td class="code"><pre class="linenumbers">4559
4560
4561
4562
4563
4564
4565
4566
4567</pre><pre class="prettyprint">    $.fn.jKit_setAttributes = function(attr){
        return this.each(function() {
            $.each( attr, function(i,v){
                try {
                    $(this).attr(String(i),String(v));
                } catch(err) {}
            });
        });
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-ios">jKit_iOS</h3>

<p>The <strong>jKit_iOS</strong> function</p>
</td><td class="code"><pre class="linenumbers">4574
4575
4576</pre><pre class="prettyprint">    $.fn.jKit_iOS = function(){
        return navigator.userAgent.match(/(iPod|iPhone|iPad)/i);
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-belowthefold">jKit_belowTheFold</h3>

<p>The <strong>jKit_belowTheFold</strong> function</p>
</td><td class="code"><pre class="linenumbers">4583
4584
4585
4586</pre><pre class="prettyprint">    $.fn.jKit_belowTheFold = function(){
        var fold = $(window).height() + $(window).scrollTop();
        return fold &lt;= $(this).offset().top;
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-abovethetop">jKit_aboveTheTop</h3>

<p>The <strong>jKit_aboveTheTop</strong> function</p>
</td><td class="code"><pre class="linenumbers">4593
4594
4595
4596</pre><pre class="prettyprint">    $.fn.jKit_aboveTheTop = function(){
        var top = $(window).scrollTop();
        return top &gt;= $(this).offset().top + $(this).height();
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-rightofscreen">jKit_rightOfScreen</h3>

<p>The <strong>jKit_rightOfScreen</strong> function</p>
</td><td class="code"><pre class="linenumbers">4603
4604
4605
4606</pre><pre class="prettyprint">    $.fn.jKit_rightOfScreen = function(){
        var fold = $(window).width() + $(window).scrollLeft();
        return fold &lt;= $(this).offset().left;
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-leftofscreen">jKit_leftOfScreen</h3>

<p>The <strong>jKit_leftOfScreen</strong> function</p>
</td><td class="code"><pre class="linenumbers">4613
4614
4615
4616</pre><pre class="prettyprint">    $.fn.jKit_leftOfScreen = function(){
        var left = $(window).scrollLeft();
        return left &gt;= $(this).offset().left + $(this).width();
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit-inviewport">jKit_inViewport</h3>

<p>The <strong>jKit_inViewport</strong> function</p>
</td><td class="code"><pre class="linenumbers">4623
4624
4625</pre><pre class="prettyprint">    $.fn.jKit_inViewport = function(){
        return !$(this).jKit_belowTheFold() &amp;&amp; !$(this).jKit_aboveTheTop() &amp;&amp; !$(this).jKit_rightOfScreen() &amp;&amp; !$(this).jKit_leftOfScreen();
    };</pre></td></tr><tr class="docu"><td class="comment"><h3 id="jkit">jKit</h3>

<p>The <strong>jKit</strong> function registers jKit as a jQuery plugin.</p>
</td><td class="code"><pre class="linenumbers">4632
4633
4634
4635
4636
4637
4638
4639
4640
4641</pre><pre class="prettyprint">    $.fn.jKit = function(options, moreoptions) {
        
        return this.each(function() {
            var plugin = new $.jKit(this, options, moreoptions);
            $(this).data('jKit', plugin);
        });
    
    };

})(jQuery);</pre></td></tr></tbody></table>